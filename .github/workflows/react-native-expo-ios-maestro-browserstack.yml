name: react-native-expo-ios-maestro-browserstack
# Trigger fresh runs after security fixes

on:
  pull_request:
    branches: [main]
    paths:
      - 'react-native-expo/**'
      - '.github/workflows/react-native-expo-ios-maestro-browserstack.yml'
      - '.github/scripts/browserstack-maestro-test.py'
  push:
    branches: [main]
    paths:
      - 'react-native-expo/**'
      - '.github/workflows/react-native-expo-ios-maestro-browserstack.yml'
      - '.github/scripts/browserstack-maestro-test.py'
  workflow_dispatch:

concurrency:
  group: rn-expo-ios-maestro-browserstack-${{ github.ref }}
  cancel-in-progress: false

jobs:
  maestro-ios-tests:
    name: Maestro iOS Tests on BrowserStack
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: react-native-expo/yarn.lock

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Insert test document into Ditto Cloud
        run: |
          # Use GitHub run ID to create deterministic document ID
          DOC_ID="github_expo_ios_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Insert document using curl with correct JSON structure
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"title\": \"GitHub Expo Test Task ${GITHUB_RUN_ID}\",
                  \"done\": false,
                  \"deleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "‚úì Successfully inserted test document with ID: ${DOC_ID}"
            echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Install dependencies
        working-directory: react-native-expo
        run: yarn install

      - name: Install iOS pods
        working-directory: react-native-expo/ios
        run: pod install

      - name: Build iOS IPA (Unsigned for BrowserStack)
        working-directory: react-native-expo
        run: |
          # BrowserStack requires proper device .ipa files (Payload-style) for Maestro
          cd ios
          
          # 1) Archive for device with Release configuration (bundles JS, no Metro dependency)
          # Set NODE_BINARY to ensure Bundle React Native script works
          export NODE_BINARY=$(command -v node)
          
          xcodebuild -workspace reactnativeexpo.xcworkspace \
            -scheme reactnativeexpo \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/reactnativeexpo.xcarchive \
            clean archive \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY=""
          
          # 2) Package an unsigned .ipa (Payload layout)
          APP_NAME="reactnativeexpo"
          IPA_DIR="build/ipa"
          mkdir -p "$IPA_DIR/Payload"
          cp -R "build/reactnativeexpo.xcarchive/Products/Applications/${APP_NAME}.app" "$IPA_DIR/Payload/"
          ( cd "$IPA_DIR" && zip -r "${APP_NAME}-unsigned.ipa" Payload )
          
          echo "‚úÖ Successfully created unsigned device IPA for BrowserStack"

      - name: Verify iOS IPA exists
        run: |
          # Look for the unsigned device IPA file for BrowserStack Maestro v2
          echo "üîç Searching for iOS IPA file..."
          
          # Look for the specific unsigned IPA
          IOS_IPA_PATH="react-native-expo/ios/build/ipa/reactnativeexpo-unsigned.ipa"
          
          if [ -f "$IOS_IPA_PATH" ]; then
            echo "‚úì iOS IPA found: $IOS_IPA_PATH"
            echo "IOS_APP_PATH=$IOS_IPA_PATH" >> $GITHUB_ENV
          else
            echo "‚ùå iOS IPA not found at expected location: $IOS_IPA_PATH"
            echo "Checking build output structure:"
            find react-native-expo/ios/build -name "*.ipa" -type f || echo "No .ipa files found in build output"
            echo ""
            echo "Build directory structure:"
            ls -la react-native-expo/ios/build/ || echo "Build directory not found"
            echo ""
            echo "IPA directory contents:"
            ls -la react-native-expo/ios/build/ipa/ || echo "IPA directory not found"
            exit 1
          fi

      - name: Execute Maestro tests on BrowserStack iOS devices
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
          DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
        run: |
          echo "üöÄ Starting BrowserStack Maestro test for iOS Expo app"
          
          # Upload iOS app to BrowserStack (v2 API per docs)
          echo "üì¶ Uploading iOS app..."
          APP_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/app" \
            -F "file=@${IOS_APP_PATH}" \
            -F "custom_id=DittoRNExpoIOS")
          
          echo "$APP_RESPONSE"
          APP_URL=$(echo "$APP_RESPONSE" | python3 -c 'import sys, json; print(json.load(sys.stdin).get("app_url",""))')
          if [ -z "$APP_URL" ]; then
            echo "‚ùå Failed to upload iOS app"
            exit 1
          fi
          echo "‚úÖ iOS app uploaded: $APP_URL"
          
          # Create Maestro test suite ZIP with REQUIRED parent folder structure
          echo "üìã Creating Maestro test suite with parent folder..."
          cd react-native-expo
          rm -f maestro-tests.zip
          # Create parent folder structure required by BrowserStack
          mkdir -p maestro-test-suite
          cp -r .maestro/* maestro-test-suite/
          zip -qry maestro-tests.zip maestro-test-suite
          
          # Upload Maestro suite to BrowserStack (v2 API per docs)
          SUITE_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/maestro/v2/test-suite" \
            -F "file=@maestro-tests.zip" \
            -F "custom_id=DittoRNMaestroSuite")
          
          echo "$SUITE_RESPONSE"  
          SUITE_URL=$(echo "$SUITE_RESPONSE" | python3 -c 'import sys, json; print(json.load(sys.stdin).get("test_suite_url",""))')
          if [ -z "$SUITE_URL" ]; then
            echo "‚ùå Failed to upload Maestro suite: $SUITE_RESPONSE"
            exit 1
          fi
          echo "‚úÖ Maestro suite uploaded: $SUITE_URL"
          
          # Execute Maestro tests on iOS devices (v2 API per docs with execute parameter)
          echo "üß™ Starting Maestro tests on iOS devices..."
          BUILD_RESPONSE=$(curl -s -u "${BROWSERSTACK_USERNAME}:${BROWSERSTACK_ACCESS_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"app\": \"$APP_URL\",
              \"testSuite\": \"$SUITE_URL\",
              \"devices\": [\"iPhone 14-16\", \"iPhone 15-17\"],
              \"project\": \"Ditto React Native\",
              \"buildName\": \"RN Expo iOS Maestro Build #${{ github.run_number }}\",
              \"buildTag\": \"${{ github.ref_name }}\",
              \"deviceLogs\": true,
              \"video\": true,
              \"networkLogs\": true,
              \"execute\": [
                \"flows/01-app-launch.yaml\",
                \"flows/02-create-task.yaml\", 
                \"flows/03-toggle-task.yaml\",
                \"flows/04-edit-task.yaml\",
                \"flows/05-delete-task.yaml\",
                \"flows/06-sync-toggle.yaml\",
                \"flows/07-data-persistence.yaml\",
                \"flows/08-external-sync-verification.yaml\",
                \"flows/09-full-workflow.yaml\"
              ],
              \"local\": false,
              \"parallelSessions\": 1
            }" \
            https://api-cloud.browserstack.com/app-automate/maestro/v2/build)
          
          echo "$BUILD_RESPONSE"
          BUILD_ID=$(echo "$BUILD_RESPONSE" | python3 -c 'import sys, json; print(json.load(sys.stdin).get("buildId",""))')
          if [ -n "$BUILD_ID" ]; then
            echo "‚úÖ Maestro build started successfully! Build ID: $BUILD_ID"
          else
            echo "‚ùå Failed to start Maestro build: $BUILD_RESPONSE"
          fi
          
          echo "‚úÖ Maestro build started successfully!"
          echo "üìä Check results in BrowserStack dashboard: https://app-automate.browserstack.com/"
          echo "üè∑Ô∏è  Project: Ditto React Native"
          echo "üîó Build: RN Expo iOS Maestro Build #${{ github.run_number }}"

      - name: Generate test report
        if: always()
        run: |
          echo "# React Native Expo iOS Maestro Test Report" > maestro-ios-test-report.md
          echo "" >> maestro-ios-test-report.md
          echo "## Test Configuration" >> maestro-ios-test-report.md
          echo "- **App Type**: React Native with Expo" >> maestro-ios-test-report.md
          echo "- **Platform**: iOS" >> maestro-ios-test-report.md
          echo "- **Test Framework**: Maestro" >> maestro-ios-test-report.md
          echo "- **Platform**: BrowserStack App Automate" >> maestro-ios-test-report.md
          echo "- **GitHub Run**: #${{ github.run_number }}" >> maestro-ios-test-report.md
          echo "" >> maestro-ios-test-report.md
          echo "## Tested Devices" >> maestro-ios-test-report.md
          echo "- iPhone 14 (iOS 16)" >> maestro-ios-test-report.md
          echo "- iPhone 15 (iOS 17)" >> maestro-ios-test-report.md
          echo "- iPad Pro 12.9 2022 (iOS 16)" >> maestro-ios-test-report.md
          echo "" >> maestro-ios-test-report.md
          echo "## Sync Verification" >> maestro-ios-test-report.md
          echo "- **External Test Document ID**: ${GITHUB_TEST_DOC_ID:-Not generated}" >> maestro-ios-test-report.md

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: expo-ios-maestro-test-results
          path: |
            maestro-ios-test-report.md
            .github/scripts/browserstack-maestro-test.py