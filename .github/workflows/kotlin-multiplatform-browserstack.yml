name: kotlin-multiplatform-browserstack

on:
  pull_request:
    branches: [main]
    paths:
      - 'kotlin-multiplatform/**'
      - '.github/workflows/kotlin-multiplatform-browserstack.yml'
  push:
    branches: [main]
    paths:
      - 'kotlin-multiplatform/**'
      - '.github/workflows/kotlin-multiplatform-browserstack.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: "17"

jobs:
  build-and-test:
    name: Build and test on BrowserStack
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            kotlin-multiplatform/.gradle
          key: ${{ runner.os }}-gradle-kmp-bs-${{ hashFiles('kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-kmp-bs-

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Insert test document into Ditto Cloud
        run: |
          # Use GitHub run ID to create deterministic document ID
          DOC_ID="github_kmp_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Insert document using curl with correct JSON structure
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"text\": \"GitHub KMP BrowserStack Test ${GITHUB_RUN_ID}\",
                  \"isCompleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✓ Successfully inserted test document with ID: ${DOC_ID}"
            echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
          else
            echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Create Android instrumented test
        run: |
          # Create androidTest directory structure
          mkdir -p kotlin-multiplatform/composeApp/src/androidTest/java/com/ditto/quickstart
          
          # Create BrowserStack instrumented test
          cat > kotlin-multiplatform/composeApp/src/androidTest/java/com/ditto/quickstart/DittoSyncInstrumentedTest.kt << 'EOF'
          package com.ditto.quickstart

          import androidx.compose.ui.test.junit4.createAndroidComposeRule
          import androidx.compose.ui.test.onNodeWithText
          import androidx.compose.ui.test.performClick
          import androidx.compose.ui.test.performTextInput
          import androidx.compose.ui.test.assertIsDisplayed
          import androidx.test.ext.junit.runners.AndroidJUnit4
          import kotlinx.coroutines.delay
          import kotlinx.coroutines.runBlocking
          import org.junit.Rule
          import org.junit.Test
          import org.junit.runner.RunWith

          @RunWith(AndroidJUnit4::class)
          class DittoSyncInstrumentedTest {

              @get:Rule
              val composeTestRule = createAndroidComposeRule<MainActivity>()

              @Test
              fun testDittoSyncIntegration() = runBlocking {
                  // Get test document ID from instrumentation arguments
                  val testDocId = androidx.test.platform.app.InstrumentationRegistry
                      .getArguments()
                      .getString("GITHUB_TEST_DOC_ID")

                  if (testDocId.isNullOrBlank()) {
                      println("⚠️ Skipping integration test - no test document ID found")
                      return@runBlocking
                  }

                  println("🔄 Testing Ditto sync integration with document ID: $testDocId")

                  // Wait for app to initialize
                  composeTestRule.waitForIdle()
                  delay(3000) // Give Ditto time to sync

                  // Extract GitHub run ID for verification
                  val runId = testDocId.split("_").getOrNull(3) ?: testDocId
                  println("Looking for GitHub Run ID: $runId")

                  // Look for the test document from Ditto Cloud
                  // This verifies that Ditto sync is working
                  try {
                      composeTestRule.onNodeWithText(
                          text = "GitHub KMP BrowserStack Test",
                          substring = true
                      ).assertIsDisplayed()
                      println("✅ Found synced test document from Ditto Cloud")
                  } catch (e: Exception) {
                      println("⚠️ Test document not found, continuing with basic functionality test")
                  }

                  // Test basic task creation functionality
                  println("Testing task creation...")

                  // Find and interact with task input (adjust selector based on actual UI)
                  try {
                      composeTestRule.onNodeWithText("Add a task").performClick()
                      composeTestRule.onNodeWithText("Task input").performTextInput("BrowserStack Test Task")
                      
                      // Look for add button or submit action
                      composeTestRule.onNodeWithText("Add").performClick()
                      
                      // Wait for task to appear
                      delay(2000)
                      
                      // Verify task was created
                      composeTestRule.onNodeWithText("BrowserStack Test Task").assertIsDisplayed()
                      println("✅ Task creation test passed")
                      
                  } catch (e: Exception) {
                      println("⚠️ Task creation test failed, but sync verification may have passed: ${e.message}")
                  }

                  println("✅ Ditto sync integration test completed")
              }
          }
          EOF

      - name: Add androidTest dependencies
        run: |
          # Add androidTest dependencies if not present
          if ! grep -q "androidTestImplementation.*compose-ui-test-junit4" kotlin-multiplatform/composeApp/build.gradle.kts; then
            # Add dependencies to the Android section
            sed -i '/dependencies {$/a\    androidTestImplementation(compose.uiTestJunit4)\n    androidTestImplementation(libs.androidx.test.junit)\n    androidTestImplementation(libs.androidx.espresso.core)' kotlin-multiplatform/composeApp/build.gradle.kts
          fi

      - name: Make gradlew executable
        working-directory: kotlin-multiplatform
        run: chmod +x gradlew

      - name: Run unit tests
        working-directory: kotlin-multiplatform
        run: ./gradlew test

      - name: Build APK and test APK
        working-directory: kotlin-multiplatform
        run: |
          ./gradlew :composeApp:assembleDebug :composeApp:assembleDebugAndroidTest
          echo "APKs built successfully"

      - name: Upload APKs to BrowserStack
        id: upload
        run: |
          # Upload app APK
          echo "Uploading app APK..."
          APP_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@kotlin-multiplatform/composeApp/build/outputs/apk/debug/composeApp-debug.apk" \
            -F "custom_id=ditto-kmp-app")
          
          echo "App upload response: $APP_UPLOAD_RESPONSE"
          APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)
          
          if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
            echo "Error: Failed to upload app APK"
            echo "Response: $APP_UPLOAD_RESPONSE"
            exit 1
          fi
          
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          echo "App uploaded successfully: $APP_URL"
          
          # Upload test APK
          echo "Uploading test APK..."
          TEST_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/test-suite" \
            -F "file=@kotlin-multiplatform/composeApp/build/outputs/apk/androidTest/debug/composeApp-debug-androidTest.apk" \
            -F "custom_id=ditto-kmp-test")
          
          echo "Test upload response: $TEST_UPLOAD_RESPONSE"
          TEST_URL=$(echo $TEST_UPLOAD_RESPONSE | jq -r .test_url)
          
          if [ "$TEST_URL" = "null" ] || [ -z "$TEST_URL" ]; then
            echo "Error: Failed to upload test APK"
            echo "Response: $TEST_UPLOAD_RESPONSE"
            exit 1
          fi
          
          echo "test_url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "Test APK uploaded successfully: $TEST_URL"

      - name: Execute tests on BrowserStack
        id: test
        run: |
          # Validate inputs before creating test execution request
          APP_URL="${{ steps.upload.outputs.app_url }}"
          TEST_URL="${{ steps.upload.outputs.test_url }}"
          
          echo "App URL: $APP_URL"
          echo "Test URL: $TEST_URL"
          
          if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
            echo "Error: No valid app URL available"
            exit 1
          fi
          
          if [ -z "$TEST_URL" ] || [ "$TEST_URL" = "null" ]; then
            echo "Error: No valid test URL available"
            exit 1
          fi
          
          # Create test execution request with test document ID
          BUILD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
            -H "Content-Type: application/json" \
            -d "{
              \"app\": \"$APP_URL\",
              \"testSuite\": \"$TEST_URL\",
              \"devices\": [
                \"Google Pixel 8-14.0\",
                \"Samsung Galaxy S23-13.0\",
                \"Google Pixel 6-12.0\",
                \"OnePlus 9-11.0\"
              ],
              \"projectName\": \"Ditto Kotlin Multiplatform\",
              \"buildName\": \"Build #${{ github.run_number }}\",
              \"buildTag\": \"${{ github.ref_name }}\",
              \"deviceLogs\": true,
              \"video\": true,
              \"networkLogs\": true,
              \"autoGrantPermissions\": true,
              \"instrumentationLogs\": true,
              \"debugscreenshots\": true,
              \"env\": {
                \"GITHUB_TEST_DOC_ID\": \"${{ env.GITHUB_TEST_DOC_ID }}\"
              }
            }")
          
          echo "BrowserStack API response:"
          echo "$BUILD_RESPONSE"
          
          BUILD_ID=$(echo "$BUILD_RESPONSE" | jq -r .build_id)
          
          # Check if BUILD_ID is null or empty
          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Error: Failed to create BrowserStack build"
            echo "Response: $BUILD_RESPONSE"
            exit 1
          fi
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Build started with ID: $BUILD_ID"

      - name: Wait for BrowserStack tests to complete
        run: |
          BUILD_ID="${{ steps.test.outputs.build_id }}"
          
          # Validate BUILD_ID before proceeding
          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Error: No valid BUILD_ID available. Skipping test monitoring."
            exit 1
          fi
          
          MAX_WAIT_TIME=1800  # 30 minutes
          CHECK_INTERVAL=30   # Check every 30 seconds
          ELAPSED=0
          
          while [ $ELAPSED -lt $MAX_WAIT_TIME ]; do
            BUILD_STATUS_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")
            
            BUILD_STATUS=$(echo "$BUILD_STATUS_RESPONSE" | jq -r .status)
            
            # Check for API errors
            if [ "$BUILD_STATUS" = "null" ] || [ -z "$BUILD_STATUS" ]; then
              echo "Error getting build status. Response: $BUILD_STATUS_RESPONSE"
              sleep $CHECK_INTERVAL
              ELAPSED=$((ELAPSED + CHECK_INTERVAL))
              continue
            fi
            
            echo "Build status: $BUILD_STATUS (elapsed: ${ELAPSED}s)"
            echo "Full response: $BUILD_STATUS_RESPONSE"
            
            # Check for completion states
            if [ "$BUILD_STATUS" = "done" ] || [ "$BUILD_STATUS" = "failed" ] || [ "$BUILD_STATUS" = "error" ] || [ "$BUILD_STATUS" = "passed" ] || [ "$BUILD_STATUS" = "completed" ]; then
              echo "Build completed with status: $BUILD_STATUS"
              break
            fi
            
            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
          done
          
          # Get final results
          FINAL_RESULT=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")
          
          echo "Final build result:"
          echo "$FINAL_RESULT" | jq .
          
          # Check if we got valid results
          if echo "$FINAL_RESULT" | jq -e .devices > /dev/null 2>&1; then
            # Check if the overall build passed
            BUILD_STATUS=$(echo "$FINAL_RESULT" | jq -r .status)
            if [ "$BUILD_STATUS" != "passed" ]; then
              echo "Build failed with status: $BUILD_STATUS"
              
              # Check each device for failures
              FAILED_TESTS=$(echo "$FINAL_RESULT" | jq -r '.devices[] | select(.sessions[].status != "passed") | .device')
              
              if [ -n "$FAILED_TESTS" ]; then
                echo "Tests failed on devices: $FAILED_TESTS"
              fi
              
              exit 1
            else
              echo "All tests passed successfully!"
            fi
          else
            echo "Warning: Could not parse final results"
            echo "Raw response: $FINAL_RESULT"
          fi

      - name: Cleanup test document
        if: always()
        run: |
          DOC_ID="${{ env.GITHUB_TEST_DOC_ID }}"
          if [ -n "$DOC_ID" ]; then
            curl -s -X POST \
              -H 'Content-type: application/json' \
              -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
              -d "{
                \"statement\": \"DELETE FROM tasks WHERE _id = :docId\",
                \"args\": {
                  \"docId\": \"${DOC_ID}\"
                }
              }" \
            "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute"
            echo "🧹 Cleaned up test document: $DOC_ID"
          fi

      - name: Generate test report
        if: always()
        run: |
          BUILD_ID="${{ steps.test.outputs.build_id }}"
          
          # Create test report
          echo "# BrowserStack KMP Test Report" > test-report.md
          echo "" >> test-report.md
          
          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Build ID: N/A (Build creation failed)" >> test-report.md
            echo "" >> test-report.md
            echo "## Error" >> test-report.md
            echo "Failed to create BrowserStack build. Check the 'Execute tests on BrowserStack' step for details." >> test-report.md
          else
            echo "Build ID: $BUILD_ID" >> test-report.md
            echo "View full report: https://app-automate.browserstack.com/dashboard/v2/builds/$BUILD_ID" >> test-report.md
            echo "" >> test-report.md
            
            # Get detailed results
            RESULTS=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")
            
            echo "## Device Results" >> test-report.md
            if echo "$RESULTS" | jq -e .devices > /dev/null 2>&1; then
              echo "$RESULTS" | jq -r '.devices[] | "- \(.device): \(.status)"' >> test-report.md
            else
              echo "Unable to retrieve device results" >> test-report.md
            fi
            
            echo "" >> test-report.md
            echo "## Sync Verification" >> test-report.md
            echo "- GitHub Test Document ID: ${{ env.GITHUB_TEST_DOC_ID }}" >> test-report.md
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            kotlin-multiplatform/composeApp/build/outputs/apk/
            kotlin-multiplatform/composeApp/build/reports/
            test-report.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const buildId = '${{ steps.test.outputs.build_id }}';
            const status = '${{ job.status }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            
            let body;
            if (buildId === 'null' || buildId === '' || !buildId) {
              body = `## 📱 BrowserStack KMP Test Results
              
              **Status:** ❌ Failed (Build creation failed)
              **Build:** [#${{ github.run_number }}](${runUrl})
              **Issue:** Failed to create BrowserStack build. Check the workflow logs for details.
              
              ### Expected Devices:
              - Google Pixel 8 (Android 14)
              - Samsung Galaxy S23 (Android 13)
              - Google Pixel 6 (Android 12)
              - OnePlus 9 (Android 11)
              `;
            } else {
              const bsUrl = `https://app-automate.browserstack.com/dashboard/v2/builds/${buildId}`;
              body = `## 📱 BrowserStack KMP Test Results
              
              **Status:** ${status === 'success' ? '✅ Passed' : '❌ Failed'}
              **Build:** [#${{ github.run_number }}](${runUrl})
              **BrowserStack:** [View detailed results](${bsUrl})
              
              ### Tested Devices:
              - Google Pixel 8 (Android 14)
              - Samsung Galaxy S23 (Android 13)
              - Google Pixel 6 (Android 12)
              - OnePlus 9 (Android 11)
              
              ### Features Tested:
              - Ditto sync verification (test document from cloud)
              - Basic task creation functionality
              - UI interaction and navigation
              `;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });