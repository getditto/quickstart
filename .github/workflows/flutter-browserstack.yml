name: flutter-browserstack

on:
  pull_request:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-browserstack.yml'
  push:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-browserstack.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test Flutter on BrowserStack
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          cache: true

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Insert test document into Ditto Cloud
        run: |
          # Use GitHub run ID to create deterministic document ID
          DOC_ID="github_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Insert document using curl with correct JSON structure for Flutter
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"title\": \"GitHub Test Task ${GITHUB_RUN_ID}\",
                  \"done\": false,
                  \"deleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✓ Successfully inserted test document with ID: ${DOC_ID}"
            echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
          else
            echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Get Flutter dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Run Flutter analyzer (lint)
        working-directory: flutter_app
        run: flutter analyze

      - name: Run unit tests
        working-directory: flutter_app
        run: flutter test

      - name: Build Flutter web
        working-directory: flutter_app
        run: |
          flutter build web --release
          echo "Flutter web app built successfully"

      - name: Start web server
        working-directory: flutter_app
        run: |
          # Install http-server globally
          npm install -g http-server
          # Start server in background
          nohup http-server build/web -p 3000 -c-1 --cors > server.log 2>&1 &
          # Wait for server to start
          sleep 10
          # Test that server is responding
          curl -f http://localhost:3000/ || (echo "Server failed to start" && cat server.log && exit 1)
          echo "Flutter web server started on http://localhost:3000"

      - name: Install BrowserStack Local binary
        run: |
          wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
          unzip BrowserStackLocal-linux-x64.zip
          chmod +x BrowserStackLocal
          # Start BrowserStack Local tunnel
          nohup ./BrowserStackLocal --key "${{ secrets.BROWSERSTACK_ACCESS_KEY }}" --daemon start &
          sleep 10
          echo "BrowserStack Local tunnel established"

      - name: Make test script executable
        run: chmod +x .github/scripts/flutter-browserstack-test.py

      - name: Execute tests on BrowserStack
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
        run: |
          # Install Python dependencies
          pip3 install selenium
          # Run the test script
          python3 .github/scripts/flutter-browserstack-test.py

      - name: Run integration tests locally
        working-directory: flutter_app
        run: |
          # Start Flutter web server for integration tests
          nohup flutter run -d web-server --web-port 8080 --web-hostname 0.0.0.0 > flutter_server.log 2>&1 &
          sleep 15
          # Run integration tests
          flutter test integration_test/app_test.dart -d web-server || echo "Integration tests completed with issues"

      - name: Stop BrowserStack Local tunnel
        if: always()
        run: ./BrowserStackLocal --key "${{ secrets.BROWSERSTACK_ACCESS_KEY }}" --daemon stop || true
          
      - name: Generate test report
        if: always()
        run: |
          echo "# BrowserStack Flutter Web Test Report" > test-report.md
          echo "" >> test-report.md
          echo "## Tested Browsers" >> test-report.md
          echo "- Chrome 120.0 (Windows 11)" >> test-report.md
          echo "- Firefox 121.0 (Windows 11)" >> test-report.md
          echo "" >> test-report.md
          echo "## Flutter Build Info" >> test-report.md
          echo "- Flutter Version: 3.22.0" >> test-report.md
          echo "- Build Type: Web Release" >> test-report.md
          echo "" >> test-report.md
          echo "## Sync Verification" >> test-report.md
          echo "- GitHub Test Document ID: ${GITHUB_TEST_DOC_ID:-Not generated}" >> test-report.md

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-test-results
          path: |
            flutter_app/build/web/
            flutter_app/server.log
            flutter_app/flutter_server.log
            test-report.md
            *screenshot*.png
            .github/scripts/flutter-browserstack-test.py