name: Rust TUI CI
on:
  push:
    branches: [main]
    paths:
      - 'rust-tui/**'
  pull_request:
    branches: [main]
    paths:
      - 'rust-tui/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy
      
      - name: Run clippy
        working-directory: rust-tui
        run: cargo clippy -- -D warnings
      
      - name: Check formatting
        working-directory: rust-tui
        run: |
          cargo fmt --check
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting issues found. Run 'cargo fmt' to fix."
            exit 1
          fi

  build:
    name: Build
    strategy:
      matrix:
        os: ["macos-latest", "ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    needs: lint
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy
      
      - name: Build project
        working-directory: rust-tui
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            export RUSTFLAGS="-C prefer-dynamic"
          fi
          cargo build

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy
      
      - name: Run tests
        working-directory: rust-tui
        run: cargo test

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy
      
      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
      
      - name: Insert test document into Ditto Cloud
        run: |
          TIMESTAMP=$(date +%s)
          INVERTED_TIMESTAMP=$((9999999999 - TIMESTAMP))
          DOC_ID="${INVERTED_TIMESTAMP}_ci_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          DOC_TITLE="${INVERTED_TIMESTAMP}_ci_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"title\": \"${DOC_TITLE}\",
                  \"done\": false,
                  \"deleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "GITHUB_TEST_DOC_TITLE=${DOC_TITLE}" >> $GITHUB_ENV
          else
            echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
      
      - name: Build and run integration test
        working-directory: rust-tui
        env:
          TASK_TO_FIND: ${{ env.GITHUB_TEST_DOC_TITLE }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          # Build integration test
          cargo build --bin integration_test
          # Run integration test
          cargo run --bin integration_test

  summary:
    name: CI Report
    runs-on: ubuntu-latest
    needs: [lint, build, test, integration-test]
    if: always()

    steps:
    - name: Report Results
      run: |
        echo "## 🦀 Rust TUI CI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Overall status
        if [[ "${{ needs.lint.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "**Overall Status:** ✅ All checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Overall Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Test | ${{ needs.integration-test.result == 'success' && '✅ Passed' || (needs.integration-test.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY