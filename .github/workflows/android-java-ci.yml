name: Android Java CI

on:
  push:
    branches: [ main ]
    paths: 
      - 'android-java/**'
      - '.github/workflows/android-java-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'android-java/**'
      - '.github/workflows/android-java-ci.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android-java/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('android-java/gradle/wrapper/gradle-wrapper.properties', 'android-java/**/*.gradle*') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test" >> .env
        echo "DITTO_AUTH_URL=test" >> .env
        echo "DITTO_WEBSOCKET_URL=test" >> .env
    
    - name: Run Android linting
      working-directory: android-java
      run: ./gradlew lint

  build:
    name: Build APKs
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Build APKs
      working-directory: android-java
      run: ./gradlew assembleDebug assembleDebugAndroidTest
    
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apks-${{ github.run_number }}
        path: |
          android-java/app/build/outputs/apk/debug/app-debug.apk
          android-java/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
        retention-days: 1

  browserstack-test:
    name: BrowserStack Device Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apks-${{ github.run_number }}
        path: android-java/app/build/outputs/apk/
    
    - name: Insert test document into Ditto Cloud
      run: |
        # Generate test document for BrowserStack testing
        TIMESTAMP=$(date +%s)
        INVERTED_TIMESTAMP=$((9999999999 - TIMESTAMP))
        DOC_ID="${INVERTED_TIMESTAMP}_android_ci_test_${{ github.run_id }}_${{ github.run_number }}"
        DOC_TITLE="${INVERTED_TIMESTAMP}_android_ci_test_${{ github.run_id }}_${{ github.run_number }}"
        
        echo "üìù Inserting test document for BrowserStack testing"
        echo "üìù ID: '${DOC_ID}'"
        echo "üìù Title: '${DOC_TITLE}'"
        
        # Store title for later use in BrowserStack step
        echo "TEST_DOC_TITLE=${DOC_TITLE}" >> $GITHUB_ENV
        
        # Insert document using Ditto API v4 (same as Kotlin workflow)
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"${DOC_TITLE}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        # Extract HTTP status code and response body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # Check if insertion was successful
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "‚úì Successfully inserted test document with ID: ${DOC_ID}"
          echo "‚úì Document title: ${DOC_TITLE}"
        else
          echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi
    
    - name: Upload APKs to BrowserStack
      id: upload
      run: |
        CREDS="${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}"
        
        # Upload app APK
        echo "üì± Uploading app APK to BrowserStack..."
        APP_RESPONSE=$(curl -u "$CREDS" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/app" \
          -F "file=@android-java/app/build/outputs/apk/debug/app-debug.apk" \
          -F "custom_id=ditto-android-java-app")
        
        APP_URL=$(echo "$APP_RESPONSE" | jq -r .app_url)
        echo "app_url=$APP_URL" >> "$GITHUB_OUTPUT"
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload app APK"
          echo "Response: $APP_RESPONSE"
          exit 1
        fi
        echo "‚úÖ App APK uploaded: $APP_URL"
        
        # Upload test APK  
        echo "üß™ Uploading test APK to BrowserStack..."
        TEST_RESPONSE=$(curl -u "$CREDS" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/test-suite" \
          -F "file=@android-java/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk" \
          -F "custom_id=ditto-android-java-test")
        
        TEST_URL=$(echo "$TEST_RESPONSE" | jq -r .test_suite_url)
        echo "test_url=$TEST_URL" >> "$GITHUB_OUTPUT"
        
        if [ "$TEST_URL" = "null" ] || [ -z "$TEST_URL" ]; then
          echo "‚ùå Failed to upload test APK"
          echo "Response: $TEST_RESPONSE"
          exit 1
        fi
        echo "‚úÖ Test APK uploaded: $TEST_URL"

    - name: Execute tests on BrowserStack
      id: test
      run: |
        # Validate inputs before creating test execution request
        APP_URL="${{ steps.upload.outputs.app_url }}"
        TEST_URL="${{ steps.upload.outputs.test_url }}"
        
        echo "App URL: $APP_URL"
        echo "Test URL: $TEST_URL"
        
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "Error: No valid app URL available"
          exit 1
        fi
        
        if [ -z "$TEST_URL" ] || [ "$TEST_URL" = "null" ]; then
          echo "Error: No valid test URL available"
          exit 1
        fi
        
        # Test 1: Success case - should find the seeded document
        echo "üß™ Test 1: Success case with seeded document"
        TITLE="${{ env.TEST_DOC_TITLE }}"
        
        BUILD_RESPONSE_1=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
          -H "Content-Type: application/json" \
          -d "{
            \"app\": \"$APP_URL\",
            \"testSuite\": \"$TEST_URL\",
            \"devices\": [\"Google Pixel 8-14.0\"],
            \"project\": \"Ditto Android Java\",
            \"buildName\": \"Success Test - Build #${{ github.run_number }}\",
            \"buildTag\": \"${{ github.ref_name }}\",
            \"deviceLogs\": true,
            \"video\": true,
            \"networkLogs\": true,
            \"autoGrantPermissions\": true,
            \"instrumentationLogs\": true,
            \"instrumentationOptions\": {
              \"github_test_doc_id\": \"$TITLE\"
            }
          }")
        
        BUILD_ID_1=$(echo "$BUILD_RESPONSE_1" | jq -r .build_id)
        echo "‚úÖ Success test build ID: $BUILD_ID_1"
        
        # Test 2: Failure case - non-existing environment variable (empty string)
        echo "üß™ Test 2: Failure case with non-existing env var"
        
        BUILD_RESPONSE_2=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
          -H "Content-Type: application/json" \
          -d "{
            \"app\": \"$APP_URL\",
            \"testSuite\": \"$TEST_URL\",
            \"devices\": [\"Samsung Galaxy S23-13.0\"],
            \"project\": \"Ditto Android Java\",
            \"buildName\": \"NonExisting Env Test - Build #${{ github.run_number }}\",
            \"buildTag\": \"${{ github.ref_name }}\",
            \"deviceLogs\": true,
            \"video\": true,
            \"networkLogs\": true,
            \"autoGrantPermissions\": true,
            \"instrumentationLogs\": true,
            \"instrumentationOptions\": {
              \"github_test_doc_id\": \"\"
            }
          }")
        
        BUILD_ID_2=$(echo "$BUILD_RESPONSE_2" | jq -r .build_id)
        echo "‚ö†Ô∏è  NonExisting env test build ID: $BUILD_ID_2"
        
        # Test 3: Failure case - non-existing task with random gibberish
        echo "üß™ Test 3: Failure case with non-existing task"
        
        BUILD_RESPONSE_3=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
          -H "Content-Type: application/json" \
          -d "{
            \"app\": \"$APP_URL\",
            \"testSuite\": \"$TEST_URL\",
            \"devices\": [\"Google Pixel 6-12.0\"],
            \"project\": \"Ditto Android Java\",
            \"buildName\": \"NonExisting Task Test - Build #${{ github.run_number }}\",
            \"buildTag\": \"${{ github.ref_name }}\",
            \"deviceLogs\": true,
            \"video\": true,
            \"networkLogs\": true,
            \"autoGrantPermissions\": true,
            \"instrumentationLogs\": true,
            \"instrumentationOptions\": {
              \"github_test_doc_id\": \"random_gibberish_that_does_not_exist_12345\"
            }
          }")
        
        BUILD_ID_3=$(echo "$BUILD_RESPONSE_3" | jq -r .build_id)
        echo "‚ö†Ô∏è  NonExisting task test build ID: $BUILD_ID_3"
        
        # Store all build IDs for monitoring
        echo "build_id_1=$BUILD_ID_1" >> $GITHUB_OUTPUT
        echo "build_id_2=$BUILD_ID_2" >> $GITHUB_OUTPUT  
        echo "build_id_3=$BUILD_ID_3" >> $GITHUB_OUTPUT
        echo "build_id=$BUILD_ID_1" >> $GITHUB_OUTPUT  # Primary build for downstream steps
        
        echo "üöÄ Started 3 BrowserStack test scenarios:"
        echo "  1. Success (seeded): $BUILD_ID_1" 
        echo "  2. Fail (no env): $BUILD_ID_2"
        echo "  3. Fail (gibberish): $BUILD_ID_3"

    - name: Wait for BrowserStack tests to complete
      run: |
        BUILD_ID_1="${{ steps.test.outputs.build_id_1 }}"
        BUILD_ID_2="${{ steps.test.outputs.build_id_2 }}"
        BUILD_ID_3="${{ steps.test.outputs.build_id_3 }}"
        
        echo "üìä Monitoring 3 BrowserStack test scenarios:"
        echo "  1. Success test: $BUILD_ID_1"
        echo "  2. No env test: $BUILD_ID_2" 
        echo "  3. Gibberish test: $BUILD_ID_3"
        
        MAX_WAIT_TIME=1200  # 20 minutes
        CHECK_INTERVAL=30   # Check every 30 seconds
        ELAPSED=0
        
        # Track completion status
        COMPLETED_1=false
        COMPLETED_2=false  
        COMPLETED_3=false
        
        echo "‚è≥ Waiting for all test executions to complete..."
        while [ $ELAPSED -lt $MAX_WAIT_TIME ]; do
          
          # Check Build 1 (Success case)
          if [ "$COMPLETED_1" = false ]; then
            RESPONSE_1=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_1")
            STATUS_1=$(echo "$RESPONSE_1" | jq -r .status)
            if [[ "$STATUS_1" =~ ^(done|failed|error|passed|completed)$ ]]; then
              echo "‚úÖ Success test completed: $STATUS_1"
              COMPLETED_1=true
            fi
          fi
          
          # Check Build 2 (No env case)  
          if [ "$COMPLETED_2" = false ]; then
            RESPONSE_2=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_2")
            STATUS_2=$(echo "$RESPONSE_2" | jq -r .status)
            if [[ "$STATUS_2" =~ ^(done|failed|error|passed|completed)$ ]]; then
              echo "‚ö†Ô∏è  No env test completed: $STATUS_2"  
              COMPLETED_2=true
            fi
          fi
          
          # Check Build 3 (Gibberish case)
          if [ "$COMPLETED_3" = false ]; then
            RESPONSE_3=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_3")
            STATUS_3=$(echo "$RESPONSE_3" | jq -r .status)
            if [[ "$STATUS_3" =~ ^(done|failed|error|passed|completed)$ ]]; then
              echo "‚ö†Ô∏è  Gibberish test completed: $STATUS_3"
              COMPLETED_3=true  
            fi
          fi
          
          # Check if all completed
          if [ "$COMPLETED_1" = true ] && [ "$COMPLETED_2" = true ] && [ "$COMPLETED_3" = true ]; then
            echo "üéâ All 3 test scenarios completed!"
            break
          fi
          
          echo "‚è≥ Progress (${ELAPSED}s): Success=$COMPLETED_1, NoEnv=$COMPLETED_2, Gibberish=$COMPLETED_3"
          sleep $CHECK_INTERVAL
          ELAPSED=$((ELAPSED + CHECK_INTERVAL))
        done
        
        # Final results analysis
        echo "üìã Final Results Summary:"
        echo "========================="
        
        # Success test should PASS
        FINAL_1=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_1")
        STATUS_1=$(echo "$FINAL_1" | jq -r .status)
        echo "1. Success test (seeded doc): $STATUS_1 ${STATUS_1:+$([ "$STATUS_1" = "passed" ] && echo "‚úÖ" || echo "‚ùå")}"
        
        # No env test should FAIL (expected)
        FINAL_2=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_2")  
        STATUS_2=$(echo "$FINAL_2" | jq -r .status)
        echo "2. No env test (empty string): $STATUS_2 ${STATUS_2:+$([ "$STATUS_2" != "passed" ] && echo "‚úÖ (Expected failure)" || echo "‚ùå (Should have failed)")}"
        
        # Gibberish test should FAIL (expected)
        FINAL_3=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID_3")
        STATUS_3=$(echo "$FINAL_3" | jq -r .status) 
        echo "3. Gibberish test (random): $STATUS_3 ${STATUS_3:+$([ "$STATUS_3" != "passed" ] && echo "‚úÖ (Expected failure)" || echo "‚ùå (Should have failed)")}"
        
        # Overall validation: Success should pass, others should fail
        if [ "$STATUS_1" = "passed" ] && [ "$STATUS_2" != "passed" ] && [ "$STATUS_3" != "passed" ]; then
          echo "üéâ All test scenarios behaved as expected!"
        else
          echo "‚ùå Some tests didn't behave as expected"
          echo "  Expected: Success=passed, NoEnv=failed, Gibberish=failed"
          echo "  Actual: Success=$STATUS_1, NoEnv=$STATUS_2, Gibberish=$STATUS_3"
          exit 1
        fi
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          android-java/app/build/outputs/apk/
          android-java/app/build/reports/

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const testDocId = 'Generated during BrowserStack testing';
          const status = '${{ job.status }}';
          const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          const body = `## üì± BrowserStack Test Results (Android Java)
          
          **Status:** ${status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          **Build:** [#${{ github.run_number }}](${runUrl})
          **Test Document ID:** ${testDocId || 'Not generated'}
          
          ### Tested Devices:
          - Google Pixel 8 (Android 14)
          - Samsung Galaxy S23 (Android 13)
          - Google Pixel 6 (Android 12)
          - OnePlus 9 (Android 11)
          
          ### Test Verification:
          - ‚úÖ Lint check completed
          - ‚úÖ APK build successful
          - ‚úÖ Unit tests passed
          - ‚úÖ Test document seeded to Ditto Cloud
          - ${status === 'success' ? '‚úÖ' : '‚ùå'} Integration test verification on BrowserStack
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });