name: Swift CI Enhanced

on:
  push:
    branches: [ main ]
    paths: 
      - 'swift/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'swift/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (macos-latest)
    runs-on: macos-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint..."
          brew install swiftlint
        fi
        swiftlint version
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Run SwiftLint
      working-directory: swift
      run: |
        echo "üîç Running SwiftLint analysis..."
        swiftlint lint --config .swiftlint.yml

  build-ios:
    name: Build iOS (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Resolve Package Dependencies
      working-directory: swift
      run: |
        echo "üì¶ Resolving Swift Package dependencies..."
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
    
    - name: Build iOS App
      working-directory: swift
      run: |
        echo "üî® Building iOS app for simulator..."
        xcodebuild build \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -sdk iphonesimulator \
          -destination 'generic/platform=iOS Simulator' \
          -allowProvisioningUpdates \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO

  build-macos:
    name: Build macOS (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build macOS App (if supported)
      working-directory: swift
      run: |
        echo "üçé Building macOS app..."
        xcodebuild build \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'platform=macOS' \
          -allowProvisioningUpdates \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          || echo "‚ö†Ô∏è macOS build not supported, skipping"

  integration-test:
    name: Integration Test (macos-latest)
    runs-on: macos-latest
    needs: [build-ios, build-macos]
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Insert test document into Ditto Cloud
      run: |
        # Use GitHub run ID to create deterministic document ID
        DOC_ID="swift_github_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Insert document using curl with correct JSON structure
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"Swift GitHub Test Task ${GITHUB_RUN_ID}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        # Extract HTTP status code and response body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        # Check if insertion was successful
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "‚úì Successfully inserted Swift test document with ID: ${DOC_ID}"
          echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
        else
          echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Run real integration tests
      working-directory: swift
      env:
        GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
        DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
        DITTO_AUTH_URL: ${{ secrets.DITTO_AUTH_URL }}
        DITTO_WEBSOCKET_URL: ${{ secrets.DITTO_WEBSOCKET_URL }}
      run: |
        echo "üß™ Running Swift integration tests with real Ditto cloud sync..."
        echo "üìù Test document ID: ${GITHUB_TEST_DOC_ID}"
        
        # Run the integration test runner
        chmod +x TestRunner.swift
        swift TestRunner.swift
        
        echo "‚úÖ Swift integration tests completed successfully"
        echo "üéØ Verified: Ditto initialization, sync, and CRUD operations"

  summary:
    name: Summary
    runs-on: macos-latest
    needs: [lint, build-ios, build-macos, integration-test]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "Job statuses:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Build iOS: ${{ needs.build-ios.result }}"
        echo "Build macOS: ${{ needs.build-macos.result }}"
        echo "Integration Test: ${{ needs.integration-test.result }}"
        
        # Check if any required job failed
        if [[ "${{ needs.lint.result }}" == "failure" || \
              "${{ needs.build-ios.result }}" == "failure" ]]; then
          echo "‚ùå Required jobs failed"
          exit 1
        else
          echo "‚úÖ All required jobs passed"
        fi