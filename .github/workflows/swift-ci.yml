name: Swift CI

on:
  pull_request:
    branches:
      - main
      - 'sdk-*'
  push:
    branches:
      - main
      - 'sdk-*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (macos-latest)
    runs-on: macos-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint..."
          brew install swiftlint
        fi
        swiftlint version
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Run SwiftLint
      working-directory: swift
      run: |
        echo "üîç Running SwiftLint analysis..."
        swiftlint lint --config .swiftlint.yml

  build-ios:
    name: Build iOS (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Resolve Package Dependencies
      working-directory: swift
      run: |
        echo "üì¶ Resolving Swift Package dependencies..."
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
    
    - name: Build iOS App
      working-directory: swift
      run: |
        echo "üî® Building iOS app for simulator..."
        xcodebuild build \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -sdk iphonesimulator \
          -destination 'generic/platform=iOS Simulator' \
          -allowProvisioningUpdates \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO

  build-macos:
    name: Build macOS (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build macOS App (if supported)
      working-directory: swift
      run: |
        echo "üçé Building macOS app..."
        xcodebuild build \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'platform=macOS' \
          -allowProvisioningUpdates \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          || echo "‚ö†Ô∏è macOS build not supported, skipping"


  summary:
    name: Summary
    runs-on: macos-latest
    needs: [lint, build-ios, build-macos]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "Job statuses:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Build iOS: ${{ needs.build-ios.result }}"
        echo "Build macOS: ${{ needs.build-macos.result }}"
        
        # Check if any required job failed
        if [[ "${{ needs.lint.result }}" == "failure" || \
              "${{ needs.build-ios.result }}" == "failure" ]]; then
          echo "‚ùå Required jobs failed"
          exit 1
        else
          echo "‚úÖ All required jobs passed"
        fi
