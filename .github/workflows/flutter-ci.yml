name: Flutter CI

on:
  push:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-ci.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Create .env file for linting
        run: |
          echo "DITTO_APP_ID=test" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=test" >> flutter_app/.env
          echo "DITTO_AUTH_URL=test" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=test" >> flutter_app/.env

      - name: Get dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Check formatting
        working-directory: flutter_app
        run: |
          dart format --set-exit-if-changed .
          if [ $? -ne 0 ]; then
            echo "‚ùå Code formatting issues found. Run 'dart format .' to fix."
            exit 1
          fi

      - name: Analyze code
        working-directory: flutter_app
        run: flutter analyze --no-fatal-infos

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> flutter_app/.env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> flutter_app/.env

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            flutter_app/.dart_tool
            flutter_app/build
          key: flutter-${{ runner.os }}-${{ hashFiles('flutter_app/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Get dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Build Android APK
        working-directory: flutter_app
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-android-apk-${{ github.run_number }}
          path: flutter_app/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 1

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> flutter_app/.env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> flutter_app/.env

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            flutter_app/.dart_tool
            flutter_app/build
          key: flutter-${{ runner.os }}-${{ hashFiles('flutter_app/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Cache CocoaPods dependencies
        uses: actions/cache@v4
        with:
          path: flutter_app/ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('flutter_app/ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-

      - name: Get dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Install CocoaPods
        working-directory: flutter_app/ios
        run: pod install || pod install --repo-update

      - name: Build iOS (no signing)
        working-directory: flutter_app
        run: flutter build ios --debug --no-codesign --simulator

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-build-${{ github.run_number }}
          path: flutter_app/build/ios/iphonesimulator/
          retention-days: 1

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=test" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=test" >> flutter_app/.env
          echo "DITTO_AUTH_URL=test" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=test" >> flutter_app/.env

      - name: Get dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Run tests
        working-directory: flutter_app
        run: |
          if [ -d "test" ]; then
            flutter test --coverage
          else
            echo "‚ö†Ô∏è No tests found. Skipping test execution."
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-coverage-${{ github.run_number }}
          path: flutter_app/coverage/
          retention-days: 1

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-android]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> flutter_app/.env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> flutter_app/.env

      - name: Get dependencies
        working-directory: flutter_app
        run: flutter pub get

      - name: Insert test document into Ditto Cloud
        id: seed-data
        run: |
          # Generate unique document ID using run ID and number
          DOC_ID="ci-test-flutter-${{ github.run_id }}-${{ github.run_number }}"
          DOC_TITLE="Flutter CI Test ${{ github.run_number }}"

          echo "üìù Inserting test document:"
          echo "üìù ID: ${DOC_ID}"
          echo "üìù Title: ${DOC_TITLE}"

          # Insert document using Ditto API v4
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"text\": \"${DOC_TITLE}\",
                  \"isCompleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "‚úì Successfully inserted test document with ID: ${DOC_ID}"
            echo "‚úì Document title: ${DOC_TITLE}"
            echo "GITHUB_TEST_DOC_TITLE=${DOC_TITLE}" >> $GITHUB_ENV
            echo "test_doc_title=${DOC_TITLE}" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run integration test on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          profile: Nexus 6
          script: |
            cd flutter_app
            flutter test integration_test/integration_test.dart --dart-define=TASK_TO_FIND="${{ env.GITHUB_TEST_DOC_TITLE }}"

      - name: Clean up test document
        if: always()
        run: |
          DOC_TITLE="${{ steps.seed-data.outputs.test_doc_title }}"
          DOC_ID="ci-test-flutter-${{ github.run_id }}-${{ github.run_number }}"

          if [ -n "$DOC_TITLE" ]; then
            echo "üßπ Cleaning up test document: ${DOC_ID}"

            # Delete document using Ditto API v4
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H 'Content-type: application/json' \
              -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
              -d "{
                \"statement\": \"DELETE FROM tasks WHERE _id = :id\",
                \"args\": {
                  \"id\": \"${DOC_ID}\"
                }
              }" \
            "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 204 ]; then
              echo "‚úì Successfully cleaned up test document"
            else
              echo "‚ö†Ô∏è Failed to clean up test document (HTTP $HTTP_CODE)"
            fi
          fi