#
# .github/workflows/android-cpp-browserstack.yml
# Workflow for building and testing android-cpp on BrowserStack physical devices
#
---
name: android-cpp-browserstack

on:
  pull_request:
    branches:
      - main
      - 'sdk-*'
    paths:
      - 'android-cpp/**'
      - '.github/workflows/android-cpp-browserstack.yml'
  push:
    branches:
      - main
      - 'sdk-*'
    paths:
      - 'android-cpp/**'
      - '.github/workflows/android-cpp-browserstack.yml'
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test on BrowserStack
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build APK
        working-directory: android-cpp/QuickStartTasksCPP
        run: |
          ./gradlew assembleDebug assembleDebugAndroidTest
          echo "APK built successfully"

      - name: Run Unit Tests
        working-directory: android-cpp/QuickStartTasksCPP
        run: ./gradlew test

      - name: Upload APKs to BrowserStack
        id: upload
        run: |
          # Upload app APK
          echo "Uploading app APK..."
          APP_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@android-cpp/QuickStartTasksCPP/app/build/outputs/apk/debug/app-debug.apk" \
            -F "custom_id=ditto-android-cpp-app")

          echo "App upload response: $APP_UPLOAD_RESPONSE"
          APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)

          if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
            echo "Error: Failed to upload app APK"
            echo "Response: $APP_UPLOAD_RESPONSE"
            exit 1
          fi

          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          echo "App uploaded successfully: $APP_URL"

          # Upload test APK
          echo "Uploading test APK..."
          TEST_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/test-suite" \
            -F "file=@android-cpp/QuickStartTasksCPP/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk" \
            -F "custom_id=ditto-android-cpp-test")

          echo "Test upload response: $TEST_UPLOAD_RESPONSE"
          TEST_URL=$(echo $TEST_UPLOAD_RESPONSE | jq -r .test_url)

          if [ "$TEST_URL" = "null" ] || [ -z "$TEST_URL" ]; then
            echo "Error: Failed to upload test APK"
            echo "Response: $TEST_UPLOAD_RESPONSE"
            exit 1
          fi

          echo "test_url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "Test APK uploaded successfully: $TEST_URL"

      - name: Execute tests on BrowserStack
        id: test
        run: |
          # Validate inputs before creating test execution request
          APP_URL="${{ steps.upload.outputs.app_url }}"
          TEST_URL="${{ steps.upload.outputs.test_url }}"

          echo "App URL: $APP_URL"
          echo "Test URL: $TEST_URL"

          if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
            echo "Error: No valid app URL available"
            exit 1
          fi

          if [ -z "$TEST_URL" ] || [ "$TEST_URL" = "null" ]; then
            echo "Error: No valid test URL available"
            exit 1
          fi

          # Create test execution request
          BUILD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
            -H "Content-Type: application/json" \
            -d "{
              \"app\": \"$APP_URL\",
              \"testSuite\": \"$TEST_URL\",
              \"devices\": [
                \"Google Pixel 8-14.0\",
                \"Samsung Galaxy S23-13.0\",
                \"Google Pixel 6-12.0\",
                \"OnePlus 9-11.0\"
              ],
              \"projectName\": \"Ditto Android CPP\",
              \"buildName\": \"Build #${{ github.run_number }}\",
              \"buildTag\": \"${{ github.ref_name }}\",
              \"deviceLogs\": true,
              \"video\": true,
              \"networkLogs\": true,
              \"autoGrantPermissions\": true
            }")

          echo "BrowserStack API Response:"
          echo "$BUILD_RESPONSE"

          BUILD_ID=$(echo "$BUILD_RESPONSE" | jq -r .build_id)

          # Check if BUILD_ID is null or empty
          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Error: Failed to create BrowserStack build"
            echo "Response: $BUILD_RESPONSE"
            exit 1
          fi

          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Build started with ID: $BUILD_ID"

      - name: Wait for BrowserStack tests to complete
        run: |
          BUILD_ID="${{ steps.test.outputs.build_id }}"

          # Validate BUILD_ID before proceeding
          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Error: No valid BUILD_ID available. Skipping test monitoring."
            exit 1
          fi

          MAX_WAIT_TIME=1800  # 30 minutes
          CHECK_INTERVAL=30   # Check every 30 seconds
          ELAPSED=0

          while [ $ELAPSED -lt $MAX_WAIT_TIME ]; do
            BUILD_STATUS_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")

            BUILD_STATUS=$(echo "$BUILD_STATUS_RESPONSE" | jq -r .status)

            # Check for API errors
            if [ "$BUILD_STATUS" = "null" ] || [ -z "$BUILD_STATUS" ]; then
              echo "Error getting build status. Response: $BUILD_STATUS_RESPONSE"
              sleep $CHECK_INTERVAL
              ELAPSED=$((ELAPSED + CHECK_INTERVAL))
              continue
            fi

            echo "Build status: $BUILD_STATUS (elapsed: ${ELAPSED}s)"
            echo "Full response: $BUILD_STATUS_RESPONSE"

            # Check for completion states - BrowserStack uses different status values
            if [ "$BUILD_STATUS" = "done" ] || [ "$BUILD_STATUS" = "failed" ] || [ "$BUILD_STATUS" = "error" ] || [ "$BUILD_STATUS" = "passed" ] || [ "$BUILD_STATUS" = "completed" ]; then
              echo "Build completed with status: $BUILD_STATUS"
              break
            fi

            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
          done

          # Get final results
          FINAL_RESULT=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")

          echo "Final build result:"
          echo "$FINAL_RESULT" | jq .

          # Check if we got valid results
          if echo "$FINAL_RESULT" | jq -e .devices > /dev/null 2>&1; then
            # Check if the overall build passed
            BUILD_STATUS=$(echo "$FINAL_RESULT" | jq -r .status)
            if [ "$BUILD_STATUS" != "passed" ]; then
              echo "Build failed with status: $BUILD_STATUS"

              # Check each device for failures
              FAILED_TESTS=$(echo "$FINAL_RESULT" | jq -r '.devices[] | select(.sessions[].status != "passed") | .device')

              if [ -n "$FAILED_TESTS" ]; then
                echo "Tests failed on devices: $FAILED_TESTS"
              fi

              exit 1
            else
              echo "All tests passed successfully!"
            fi
          else
            echo "Warning: Could not parse final results"
            echo "Raw response: $FINAL_RESULT"
          fi

      - name: Generate test report
        if: always()
        run: |
          BUILD_ID="${{ steps.test.outputs.build_id }}"

          # Create test report
          echo "# BrowserStack Test Report" > test-report.md
          echo "" >> test-report.md

          if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
            echo "Build ID: N/A (Build creation failed)" >> test-report.md
            echo "" >> test-report.md
            echo "## Error" >> test-report.md
            echo "Failed to create BrowserStack build. Check the 'Execute tests on BrowserStack' step for details." >> test-report.md
          else
            echo "Build ID: $BUILD_ID" >> test-report.md
            echo "View full report: https://app-automate.browserstack.com/dashboard/v2/builds/$BUILD_ID" >> test-report.md
            echo "" >> test-report.md

            # Get detailed results
            RESULTS=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
              "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID")

            echo "## Device Results" >> test-report.md
            if echo "$RESULTS" | jq -e .devices > /dev/null 2>&1; then
              echo "$RESULTS" | jq -r '.devices[] | "- \(.device): \(.status)"' >> test-report.md
            else
              echo "Unable to retrieve device results" >> test-report.md
            fi
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            android-cpp/QuickStartTasksCPP/app/build/outputs/apk/
            android-cpp/QuickStartTasksCPP/app/build/reports/
            test-report.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const buildId = '${{ steps.test.outputs.build_id }}';
            const status = '${{ job.status }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';

            let body;
            if (buildId === 'null' || buildId === '' || !buildId) {
              body = `## 📱 BrowserStack Test Results

              **Status:** ❌ Failed (Build creation failed)
              **Build:** [#${{ github.run_number }}](${runUrl})
              **Issue:** Failed to create BrowserStack build. Check the workflow logs for details.

              ### Expected Devices:
              - Google Pixel 8 (Android 14)
              - Samsung Galaxy S23 (Android 13)
              - Google Pixel 6 (Android 12)
              - OnePlus 9 (Android 11)
              `;
            } else {
              const bsUrl = `https://app-automate.browserstack.com/dashboard/v2/builds/${buildId}`;
              body = `## 📱 BrowserStack Test Results

              **Status:** ${status === 'success' ? '✅ Passed' : '❌ Failed'}
              **Build:** [#${{ github.run_number }}](${runUrl})
              **BrowserStack:** [View detailed results](${bsUrl})

              ### Tested Devices:
              - Google Pixel 8 (Android 14)
              - Samsung Galaxy S23 (Android 13)
              - Google Pixel 6 (Android 12)
              - OnePlus 9 (Android 11)
              `;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

