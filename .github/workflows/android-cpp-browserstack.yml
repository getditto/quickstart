#
# .github/workflows/android-cpp-browserstack.yml
# Workflow for building and testing android-cpp on BrowserStack physical devices
#
---
name: android-cpp-browserstack

on:
  pull_request:
    branches:
      - main
      - 'sdk-*'
    paths:
      - 'android-cpp/**'
      - '.github/workflows/android-cpp-browserstack.yml'
  push:
    branches:
      - main
      - 'sdk-*'
    paths:
      - 'android-cpp/**'
      - '.github/workflows/android-cpp-browserstack.yml'
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android-cpp/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('android-cpp/QuickStartTasksCPP/gradle/wrapper/gradle-wrapper.properties', 'android-cpp/QuickStartTasksCPP/**/*.gradle*') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test" >> .env
        echo "DITTO_AUTH_URL=test" >> .env
        echo "DITTO_WEBSOCKET_URL=test" >> .env
    
    - name: Run Android linting
      working-directory: android-cpp/QuickStartTasksCPP
      run: ./gradlew lint

  build:
    name: Build APKs
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Build APKs
      working-directory: android-cpp/QuickStartTasksCPP
      run: ./gradlew assembleDebug

    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-cpp-apks
        path: |
          android-cpp/QuickStartTasksCPP/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 1

  browserstack-appium-test:
    name: BrowserStack Appium E2E Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-cpp-apks
        path: android-cpp/QuickStartTasksCPP/app/build/outputs/apk/debug/
    
    - name: Insert test document into Ditto Cloud
      run: |
        # Generate test document for BrowserStack testing
        TIMESTAMP=$(date +%s)
        INVERTED_TIMESTAMP=$((9999999999 - TIMESTAMP))
        DOC_ID="${INVERTED_TIMESTAMP}_android_cpp_ci_test_${{ github.run_id }}_${{ github.run_number }}"
        DOC_TITLE="${INVERTED_TIMESTAMP}_android_cpp_ci_test_${{ github.run_id }}_${{ github.run_number }}"
        
        echo "üìù Inserting test document for BrowserStack testing"
        echo "üìù ID: '${DOC_ID}'"
        echo "üìù Title: '${DOC_TITLE}'"
        
        # Store title for later use in BrowserStack step
        echo "TEST_DOC_TITLE=${DOC_TITLE}" >> $GITHUB_ENV
        
        # Insert document using Ditto API v4 (same as other Android workflows)
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"${DOC_TITLE}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        # Extract HTTP status code and response body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # Check if insertion was successful
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "‚úì Successfully inserted test document with ID: ${DOC_ID}"
          echo "‚úì Document title: ${DOC_TITLE}"
        else
          echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi

    - name: Setup Java for Appium test
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'


    - name: Upload APK to BrowserStack
      id: upload
      run: |
        CREDS="${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}"

        # Upload app APK for Appium testing (different API endpoint)
        echo "üì± Uploading app APK to BrowserStack for Appium..."
        APP_RESPONSE=$(curl -u "$CREDS" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@android-cpp/QuickStartTasksCPP/app/build/outputs/apk/debug/app-debug.apk" \
          -F "custom_id=ditto-android-cpp-appium-app")

        APP_URL=$(echo "$APP_RESPONSE" | jq -r .app_url)
        echo "app_url=$APP_URL" >> "$GITHUB_OUTPUT"

        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload app APK"
          echo "Response: $APP_RESPONSE"
          exit 1
        fi
        echo "‚úÖ App APK uploaded for Appium: $APP_URL"


    - name: Execute Appium tests on BrowserStack
      id: test
      working-directory: android-cpp/QuickStartTasksCPP/appium-test
      run: |
        # Set BrowserStack credentials
        export BROWSERSTACK_USERNAME="${{ secrets.BROWSERSTACK_USERNAME }}"
        export BROWSERSTACK_ACCESS_KEY="${{ secrets.BROWSERSTACK_ACCESS_KEY }}"
        export GITHUB_TEST_DOC_ID="${{ env.TEST_DOC_TITLE }}"

        echo "üöÄ Starting Appium E2E tests on BrowserStack..."
        echo "üì± App: ${{ steps.upload.outputs.app_url }}"
        echo "üîç Test Document: ${{ env.TEST_DOC_TITLE }}"

        # Run tests using Gradle (which will connect to BrowserStack hub)
        ../gradlew test \
          -Dappium.server.url="https://${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}@hub-cloud.browserstack.com/wd/hub" \
          -DGITHUB_TEST_DOC_ID="${{ env.TEST_DOC_TITLE }}" \
          -Dapp.url="${{ steps.upload.outputs.app_url }}" \
          --console=plain \
          --no-daemon

        echo "‚úÖ Appium E2E tests completed successfully!"


    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          android-cpp/QuickStartTasksCPP/app/build/outputs/apk/
          android-cpp/QuickStartTasksCPP/appium-test/build/reports/

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const testDocId = '${{ env.TEST_DOC_TITLE }}';
          const status = '${{ job.status }}';
          const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          const body = `## üì± BrowserStack Test Results (Android C++)
          
          **Status:** ${status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          **Build:** [#${{ github.run_number }}](${runUrl})
          **Test Document ID:** ${testDocId || 'Not generated'}
          
          ### Tested Devices:
          - Google Pixel 7 (Android 13.0)
          
          ### Test Verification:
          - ‚úÖ Lint check completed
          - ‚úÖ APK build successful
          - ‚úÖ Test document seeded to Ditto Cloud
          - ${status === 'success' ? '‚úÖ' : '‚ùå'} Integration test verification on BrowserStack
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
