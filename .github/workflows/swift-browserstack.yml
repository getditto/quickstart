name: Swift BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'swift/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-browserstack:
    name: iOS BrowserStack Testing  
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build iOS App for BrowserStack
      id: build_ios
      working-directory: swift
      run: |
        echo "üî® Building iOS app for BrowserStack real device testing..."
        
        # Resolve dependencies first
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
        
        echo "üçé Building iOS device .ipa for BrowserStack real device testing..."
        
        # Build and archive iOS app for real device (not simulator)
        xcodebuild -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath build/Tasks.xcarchive \
          clean archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "üì¶ Creating unsigned .ipa for BrowserStack..."
        
        # Find the .app bundle from the archive
        APP_BUNDLE_PATH=$(find build/Tasks.xcarchive/Products/Applications -maxdepth 1 -name "*.app" -type d | head -1)
        
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "‚úÖ iOS app bundle found: $APP_BUNDLE_PATH"
          ls -la "$APP_BUNDLE_PATH"
          
          # Create unsigned IPA: Payload/<App>.app zipped as .ipa
          mkdir -p build/Payload
          cp -R "$APP_BUNDLE_PATH" build/Payload/
          (cd build && zip -qry Tasks-unsigned.ipa Payload && rm -rf Payload)
          
          # Verify IPA was created and expose absolute path for later steps
          if [ -f "build/Tasks-unsigned.ipa" ]; then
            echo "‚úÖ Unsigned .ipa created successfully: $(pwd)/build/Tasks-unsigned.ipa"
            ls -la build/Tasks-unsigned.ipa
            echo "ipa_file_path=$(pwd)/build/Tasks-unsigned.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create .ipa file"
            exit 1
          fi
          
        else
          echo "‚ùå iOS app bundle not found in archive"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
          exit 1
        fi
    
    - name: Validate iOS IPA Build
      id: ios_validation
      run: |
        echo "üì± Validating iOS .ipa build for BrowserStack deployment..."
        
        IPA_FILE="${{ steps.build_ios.outputs.ipa_file_path }}"
        if [ -f "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA: $IPA_FILE"
          echo "üì¶ IPA file details:"
          ls -la "$IPA_FILE"
          
          # Validate .ipa structure by checking Payload directory  
          unzip -l "$IPA_FILE" | head -10
          
          echo "ipa_file_path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS .ipa validation successful"
          echo "üéØ iOS .ipa is ready for BrowserStack real device testing"
        else
          echo "‚ùå IPA not found at $IPA_FILE"
          find swift -name "*.ipa" -type f || true
          exit 1
        fi
    
    - name: Upload iOS App to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading iOS .ipa to BrowserStack..."
        
        IPA_FILE="${{ steps.ios_validation.outputs.ipa_file_path }}"
        
        if [ ! -f "$IPA_FILE" ]; then
          echo "‚ùå IPA file not found: $IPA_FILE"
          exit 1
        fi
        
        echo "üì¶ Uploading .ipa file to BrowserStack: $IPA_FILE"
        ls -la "$IPA_FILE"
        
        # Upload .ipa to BrowserStack under "Swift" project (they will re-sign for real device testing)
        APP_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@$IPA_FILE" \
          -F "custom_id=swift-ios-${{ github.run_id }}")
        
        echo "Upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload iOS .ipa to BrowserStack"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ iOS .ipa uploaded successfully: $APP_URL"
    
    - name: Build XCUITest Runner for BrowserStack
      id: build_test
      working-directory: swift
      run: |
        echo "üß™ Building XCUITest runner for BrowserStack real device testing..."
        
        # Build test runner for iOS device
        xcodebuild build-for-testing \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -destination 'generic/platform=iOS' \
          -derivedDataPath build/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        # Find the test runner .app
        TEST_RUNNER_PATH=$(find build/DerivedData -name "*-Runner.app" -type d | head -1)
        if [ -d "$TEST_RUNNER_PATH" ]; then
          echo "‚úÖ Found test runner: $TEST_RUNNER_PATH"
          
          # Create test runner .ipa
          mkdir -p build/TestPayload
          cp -R "$TEST_RUNNER_PATH" build/TestPayload/
          (cd build && zip -qry TasksUITests-Runner.ipa TestPayload && rm -rf TestPayload)
          
          if [ -f "build/TasksUITests-Runner.ipa" ]; then
            echo "‚úÖ Test runner .ipa created: $(pwd)/build/TasksUITests-Runner.ipa"
            echo "test_runner_ipa=$(pwd)/build/TasksUITests-Runner.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create test runner .ipa"
            exit 1
          fi
        else
          echo "‚ùå Test runner .app not found"
          find build/DerivedData -name "*.app" -type d || echo "No .app files found"
          exit 1
        fi
    
    - name: Upload Test Runner to BrowserStack  
      id: upload_test
      run: |
        echo "üì§ Uploading XCUITest runner to BrowserStack..."
        
        TEST_IPA="${{ steps.build_test.outputs.test_runner_ipa }}"
        
        if [ ! -f "$TEST_IPA" ]; then
          echo "‚ùå Test runner .ipa not found: $TEST_IPA"
          exit 1
        fi
        
        # Upload test runner to BrowserStack
        TEST_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/test-suite" \
          -F "file=@$TEST_IPA")
        
        echo "Test upload response: $TEST_UPLOAD_RESPONSE"
        TEST_URL=$(echo $TEST_UPLOAD_RESPONSE | jq -r .test_suite_url)
        
        if [ "$TEST_URL" = "null" ] || [ -z "$TEST_URL" ]; then
          echo "‚ùå Failed to upload test runner to BrowserStack"
          echo "Response: $TEST_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "test_suite_url=$TEST_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Test runner uploaded successfully: $TEST_URL"
    
    - name: Execute XCUITests on BrowserStack Real Devices
      id: test
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      run: |
        APP_URL="${{ steps.upload.outputs.app_url }}"
        TEST_URL="${{ steps.upload_test.outputs.test_suite_url }}"
        
        echo "üöÄ Running XCUITests on BrowserStack real devices..."
        echo "App URL: $APP_URL"
        echo "Test Suite URL: $TEST_URL"
        
        # Validate URLs
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "‚ùå No valid app URL"
          exit 1
        fi
        
        if [ -z "$TEST_URL" ] || [ "$TEST_URL" = "null" ]; then
          echo "‚ùå No valid test suite URL"
          exit 1
        fi
        
        # Execute XCUITest on iPhone 15 Pro
        echo "üì± Starting test on iPhone 15 Pro..."
        TEST_EXECUTION_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/build" \
          -d '{
            "devices": ["iPhone 15 Pro-17"],
            "app": "'$APP_URL'",
            "testSuite": "'$TEST_URL'",
            "project": "Swift iOS Tasks",
            "buildName": "Swift XCUITest Build '${{ github.run_id }}'"
          }' \
          -H "Content-Type: application/json")
        
        echo "Test execution response: $TEST_EXECUTION_RESPONSE"
        BUILD_ID=$(echo $TEST_EXECUTION_RESPONSE | jq -r .build_id)
        
        if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
          echo "‚ùå Failed to start XCUITest execution"
          echo "Response: $TEST_EXECUTION_RESPONSE"
          exit 1
        fi
        
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "‚úÖ XCUITest execution started with build ID: $BUILD_ID"
        
        # Wait for test completion and check results
        echo "‚è≥ Waiting for test execution to complete..."
        for i in {1..60}; do
          sleep 30
          
          BUILD_STATUS_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            "https://api-cloud.browserstack.com/app-automate/xcuitest/builds/$BUILD_ID")
          
          STATUS=$(echo $BUILD_STATUS_RESPONSE | jq -r .status)
          echo "Build status check $i: $STATUS"
          
          if [ "$STATUS" = "passed" ]; then
            echo "‚úÖ All XCUITests passed on BrowserStack!"
            exit 0
          elif [ "$STATUS" = "failed" ]; then
            echo "‚ùå XCUITests failed on BrowserStack"
            echo "Build details: $BUILD_STATUS_RESPONSE"
            exit 1
          elif [ "$STATUS" = "error" ]; then
            echo "‚ùå XCUITest execution error"
            echo "Build details: $BUILD_STATUS_RESPONSE"
            exit 1
          fi
          
          # Continue waiting if status is "running" or "queued"
        done
        
        echo "‚ö†Ô∏è Test execution timeout after 30 minutes"
        echo "Final build status: $(echo $BUILD_STATUS_RESPONSE | jq -r .status)"
        exit 1

  summary:
    name: BrowserStack Summary
    runs-on: macos-latest
    needs: [ios-browserstack]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack XCUITest Results - Swift iOS"
        echo ""
        echo "### Native iOS XCUITest Execution"
        echo "Status: ${{ needs.ios-browserstack.result }}"
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Swift iOS app successfully passed native XCUITests on BrowserStack real devices:"
          echo "   - iPhone 15 Pro (iOS 17) - Native XCUITest execution"
          echo ""
          echo "üß™ XCUITests verified:"
          echo "   ‚úì App launches successfully on real devices"
          echo "   ‚úì Ditto SDK initializes without crashes"
          echo "   ‚úì Task CRUD operations work correctly"
          echo "   ‚úì App remains stable during extended use"
          echo "   ‚úì Real device UI interactions function properly"
          echo "   ‚úì Native iOS testing framework validation"
        else
          echo "‚ùå Swift iOS XCUITest execution failed on BrowserStack"
        fi
        
        echo ""
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "üéâ Swift iOS XCUITest execution completed successfully!"
          echo "üì± Native iOS testing validated Ditto functionality on real devices"
          echo "üîó Check BrowserStack dashboard for test recordings and detailed reports"
        else
          echo "‚ö†Ô∏è Swift iOS XCUITest execution encountered issues"
          exit 1
        fi