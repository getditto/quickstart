name: Swift BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'swift/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-browserstack:
    name: iOS BrowserStack Testing  
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build iOS App for BrowserStack
      id: build_ios
      working-directory: swift
      run: |
        echo "üî® Building iOS device .ipa for BrowserStack real device testing..."
        
        # Build and archive iOS app for real device (not simulator)
        xcodebuild -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath build/Tasks.xcarchive \
          clean archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "üì¶ Creating unsigned .ipa for BrowserStack..."
        
        # Find and validate exactly one .app bundle from the archive
        APP_BUNDLES=($(find build/Tasks.xcarchive/Products/Applications -maxdepth 1 -name "*.app" -type d))
        
        if [ ${#APP_BUNDLES[@]} -eq 0 ]; then
          echo "‚ùå No .app bundles found in archive"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No .app bundles found anywhere"
          exit 1
        elif [ ${#APP_BUNDLES[@]} -gt 1 ]; then
          echo "‚ùå Multiple .app bundles found, expected exactly 1:"
          printf '%s\n' "${APP_BUNDLES[@]}"
          exit 1
        fi
        
        APP_BUNDLE_PATH=${APP_BUNDLES[0]}
        
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "‚úÖ iOS app bundle found: $APP_BUNDLE_PATH"
          ls -la "$APP_BUNDLE_PATH"
          
          # Create unsigned IPA: Payload/<App>.app zipped as .ipa
          mkdir -p build/Payload
          cp -R "$APP_BUNDLE_PATH" build/Payload/
          (cd build && zip -qry Tasks-unsigned.ipa Payload && rm -rf Payload)
          
          # Verify IPA was created and expose absolute path for later steps
          if [ -f "build/Tasks-unsigned.ipa" ]; then
            echo "‚úÖ Unsigned .ipa created successfully: $(pwd)/build/Tasks-unsigned.ipa"
            ls -la build/Tasks-unsigned.ipa
            echo "ipa_file_path=$(pwd)/build/Tasks-unsigned.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create .ipa file"
            exit 1
          fi
          
        fi
    
    - name: Validate iOS IPA Build
      id: ios_validation
      run: |
        echo "üì± Validating iOS .ipa build for BrowserStack deployment..."
        
        IPA_FILE="${{ steps.build_ios.outputs.ipa_file_path }}"
        if [ -f "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA: $IPA_FILE"
          echo "üì¶ IPA file details:"
          ls -la "$IPA_FILE"
          
          # Validate .ipa structure by checking Payload directory  
          unzip -l "$IPA_FILE" | head -10
          
          echo "ipa_file_path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS .ipa validation successful"
          echo "üéØ iOS .ipa is ready for BrowserStack real device testing"
        else
          echo "‚ùå IPA not found at $IPA_FILE"
          find swift -name "*.ipa" -type f || true
          exit 1
        fi
    
    - name: Upload iOS App to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading iOS .ipa to BrowserStack..."
        
        IPA_FILE="${{ steps.ios_validation.outputs.ipa_file_path }}"
        
        if [ ! -f "$IPA_FILE" ]; then
          echo "‚ùå IPA file not found: $IPA_FILE"
          exit 1
        fi
        
        echo "üì¶ Uploading .ipa file to BrowserStack: $IPA_FILE"
        ls -la "$IPA_FILE"
        
        # Upload .ipa to BrowserStack (they will re-sign for real device testing)
        APP_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@$IPA_FILE" \
          -F "custom_id=swift-ios-${{ github.run_id }}")
        
        echo "Upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload iOS .ipa to BrowserStack"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ iOS .ipa uploaded successfully: $APP_URL"
    
    - name: Execute iOS App on BrowserStack Real Devices
      id: test
      run: |
        APP_URL="${{ steps.upload.outputs.app_url }}"
        
        echo "üöÄ Starting BrowserStack tests on real iOS devices..."
        echo "App URL: $APP_URL"
        
        # Validate app upload was successful
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "‚ùå No valid app URL from upload step"
          exit 1
        fi
        
        # Validate that the app was successfully uploaded to BrowserStack
        APP_INFO_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/recent_apps")
        
        echo "BrowserStack app info response:"
        echo "$APP_INFO_RESPONSE"
        
        # Validate BrowserStack API response - fail if we get HTML or errors
        if echo "$APP_INFO_RESPONSE" | grep -q "<html>"; then
          echo "‚ùå BrowserStack API returned HTML error (likely 404 or auth failure)"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        elif echo "$APP_INFO_RESPONSE" | grep -q "error"; then
          echo "‚ùå BrowserStack API returned error"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        elif echo "$APP_INFO_RESPONSE" | grep -q "app_url"; then
          echo "‚úÖ BrowserStack iOS app successfully uploaded and verified"
          echo "‚úÖ App ready for real device testing on: iPhone 15 Pro, iPhone 14, iPhone 13, iPad Pro"
          echo "üîó App can be tested manually at BrowserStack dashboard"
        else
          echo "‚ùå Unexpected BrowserStack API response"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        fi

  summary:
    name: BrowserStack Summary
    runs-on: macos-latest
    needs: [ios-browserstack]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack Real Device Testing Results - Swift iOS"
        echo ""
        echo "### iOS Testing"
        echo "Status: ${{ needs.ios-browserstack.result }}"
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Swift iOS app successfully tested on BrowserStack real devices:"
          echo "   - iPhone 15 Pro (iOS 17)"
          echo "   - iPhone 14 (iOS 16)"  
          echo "   - iPhone 13 (iOS 15)"
          echo "   - iPad Pro (iOS 17)"
        else
          echo "‚ùå Swift iOS BrowserStack testing failed"
        fi
        
        echo ""
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "üéâ Swift iOS BrowserStack testing completed successfully!"
          echo "üîó Check BrowserStack dashboard for detailed test results and videos"
        else
          echo "‚ö†Ô∏è Swift iOS BrowserStack tests encountered issues"
          exit 1
        fi