name: Swift BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'swift/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-browserstack:
    name: iOS BrowserStack Testing  
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build iOS App for BrowserStack
      id: build_ios
      working-directory: swift
      run: |
        echo "üî® Building iOS app for BrowserStack real device testing..."
        
        # Resolve dependencies first
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
        
        echo "üçé Building iOS device .ipa for BrowserStack real device testing..."
        
        # Build and archive iOS app for real device (not simulator)
        xcodebuild -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath build/Tasks.xcarchive \
          clean archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "üì¶ Creating unsigned .ipa for BrowserStack..."
        
        # Find the .app bundle from the archive
        APP_BUNDLE_PATH=$(find build/Tasks.xcarchive/Products/Applications -maxdepth 1 -name "*.app" -type d | head -1)
        
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "‚úÖ iOS app bundle found: $APP_BUNDLE_PATH"
          ls -la "$APP_BUNDLE_PATH"
          
          # Create unsigned IPA: Payload/<App>.app zipped as .ipa
          mkdir -p build/Payload
          cp -R "$APP_BUNDLE_PATH" build/Payload/
          (cd build && zip -qry Tasks-unsigned.ipa Payload && rm -rf Payload)
          
          # Verify IPA was created and expose absolute path for later steps
          if [ -f "build/Tasks-unsigned.ipa" ]; then
            echo "‚úÖ Unsigned .ipa created successfully: $(pwd)/build/Tasks-unsigned.ipa"
            ls -la build/Tasks-unsigned.ipa
            echo "ipa_file_path=$(pwd)/build/Tasks-unsigned.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create .ipa file"
            exit 1
          fi
          
        else
          echo "‚ùå iOS app bundle not found in archive"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
          exit 1
        fi
    
    - name: Validate iOS IPA Build
      id: ios_validation
      run: |
        echo "üì± Validating iOS .ipa build for BrowserStack deployment..."
        
        IPA_FILE="${{ steps.build_ios.outputs.ipa_file_path }}"
        if [ -f "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA: $IPA_FILE"
          echo "üì¶ IPA file details:"
          ls -la "$IPA_FILE"
          
          # Validate .ipa structure by checking Payload directory  
          unzip -l "$IPA_FILE" | head -10
          
          echo "ipa_file_path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS .ipa validation successful"
          echo "üéØ iOS .ipa is ready for BrowserStack real device testing"
        else
          echo "‚ùå IPA not found at $IPA_FILE"
          find swift -name "*.ipa" -type f || true
          exit 1
        fi
    
    - name: Upload iOS App to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading iOS .ipa to BrowserStack..."
        
        IPA_FILE="${{ steps.ios_validation.outputs.ipa_file_path }}"
        
        if [ ! -f "$IPA_FILE" ]; then
          echo "‚ùå IPA file not found: $IPA_FILE"
          exit 1
        fi
        
        echo "üì¶ Uploading .ipa file to BrowserStack: $IPA_FILE"
        ls -la "$IPA_FILE"
        
        # Upload .ipa to BrowserStack under "Swift" project (they will re-sign for real device testing)
        APP_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@$IPA_FILE" \
          -F "custom_id=swift-ios-${{ github.run_id }}")
        
        echo "Upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload iOS .ipa to BrowserStack"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ iOS .ipa uploaded successfully: $APP_URL"
    
    - name: Setup Python for BrowserStack Tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install BrowserStack Test Dependencies
      working-directory: swift/BrowserStackTests
      run: |
        echo "üì¶ Installing Python dependencies for automated testing..."
        pip install -r requirements.txt
        echo "‚úÖ Dependencies installed: Appium, Selenium"
    
    - name: Execute Automated Tests on BrowserStack Real Devices
      id: test
      working-directory: swift/BrowserStackTests
      env:
        BROWSERSTACK_APP_URL: ${{ steps.upload.outputs.app_url }}
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
        DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
        DITTO_AUTH_URL: ${{ secrets.DITTO_AUTH_URL }}
        DITTO_WEBSOCKET_URL: ${{ secrets.DITTO_WEBSOCKET_URL }}
      run: |
        APP_URL="${{ steps.upload.outputs.app_url }}"
        
        echo "üöÄ Running automated Ditto sync tests on real iOS devices..."
        echo "App URL: $APP_URL"
        
        # Validate app upload was successful
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "‚ùå No valid app URL from upload step"
          exit 1
        fi
        
        echo "üß™ Starting comprehensive Ditto Swift testing suite..."
        echo "üì± Testing devices: iPhone 15 Pro, iPhone 14"
        echo "üîÑ Tests: App Launch, Ditto Init, Task Operations, Stability"
        
        # Run the automated test suite
        python3 ditto_sync_test.py
        
        # Check if test results file was created
        if [ -f "browserstack_test_results.json" ]; then
          echo "üìä Test results summary:"
          cat browserstack_test_results.json | jq '.[] | {device: .device, success: .success, tests: .results.passed + .results.failed}'
          
          # Check if any tests failed
          FAILED_TESTS=$(cat browserstack_test_results.json | jq '.[] | select(.success == false) | .device')
          if [ -n "$FAILED_TESTS" ]; then
            echo "‚ùå Some devices failed testing:"
            echo "$FAILED_TESTS"
            exit 1
          else
            echo "‚úÖ All BrowserStack real device tests passed!"
            echo "üéØ Swift iOS app successfully tested Ditto sync functionality"
          fi
        else
          echo "‚ùå Test results file not found - tests may have failed to run"
          exit 1
        fi

  summary:
    name: BrowserStack Summary
    runs-on: macos-latest
    needs: [ios-browserstack]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack Automated Testing Results - Swift iOS"
        echo ""
        echo "### Automated Ditto Sync Testing"
        echo "Status: ${{ needs.ios-browserstack.result }}"
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Swift iOS app successfully passed automated Ditto testing on BrowserStack real devices:"
          echo "   - iPhone 15 Pro (iOS 17) - App Launch, Ditto Init, Task Ops, Stability"
          echo "   - iPhone 14 (iOS 16) - App Launch, Ditto Init, Task Ops, Stability"
          echo ""
          echo "üß™ Automated tests verified:"
          echo "   ‚úì App launches without crashes"
          echo "   ‚úì Ditto SDK initializes correctly"
          echo "   ‚úì Task CRUD operations function"
          echo "   ‚úì App remains stable during extended use"
          echo "   ‚úì Real device functionality confirmed"
        else
          echo "‚ùå Swift iOS automated BrowserStack testing failed"
        fi
        
        echo ""
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "üéâ Swift iOS automated BrowserStack testing completed successfully!"
          echo "ü§ñ Real device testing validated Ditto sync functionality"
          echo "üîó Check BrowserStack dashboard for session recordings and detailed logs"
        else
          echo "‚ö†Ô∏è Swift iOS automated BrowserStack tests encountered issues"
          exit 1
        fi