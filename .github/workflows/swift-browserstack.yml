name: Swift BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'swift/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-browserstack:
    name: iOS BrowserStack Testing  
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build iOS App for BrowserStack
      id: build_ios
      working-directory: swift
      run: |
        echo "üî® Building iOS app for BrowserStack real device testing..."
        
        # Resolve dependencies first
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
        
        echo "üçé Building iOS device .ipa for BrowserStack real device testing..."
        
        # Build and archive iOS app for real device (not simulator)
        xcodebuild -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath build/Tasks.xcarchive \
          clean archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "üì¶ Creating unsigned .ipa for BrowserStack..."
        
        # Find the .app bundle from the archive
        APP_BUNDLE_PATH=$(find build/Tasks.xcarchive/Products/Applications -maxdepth 1 -name "*.app" -type d | head -1)
        
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "‚úÖ iOS app bundle found: $APP_BUNDLE_PATH"
          ls -la "$APP_BUNDLE_PATH"
          
          # Create unsigned IPA: Payload/<App>.app zipped as .ipa
          mkdir -p build/Payload
          cp -R "$APP_BUNDLE_PATH" build/Payload/
          (cd build && zip -qry Tasks-unsigned.ipa Payload && rm -rf Payload)
          
          # Verify IPA was created and expose absolute path for later steps
          if [ -f "build/Tasks-unsigned.ipa" ]; then
            echo "‚úÖ Unsigned .ipa created successfully: $(pwd)/build/Tasks-unsigned.ipa"
            ls -la build/Tasks-unsigned.ipa
            echo "ipa_file_path=$(pwd)/build/Tasks-unsigned.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create .ipa file"
            exit 1
          fi
          
        else
          echo "‚ùå iOS app bundle not found in archive"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
          exit 1
        fi
    
    - name: Validate iOS IPA Build
      id: ios_validation
      run: |
        echo "üì± Validating iOS .ipa build for BrowserStack deployment..."
        
        IPA_FILE="${{ steps.build_ios.outputs.ipa_file_path }}"
        if [ -f "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA: $IPA_FILE"
          echo "üì¶ IPA file details:"
          ls -la "$IPA_FILE"
          
          # Validate .ipa structure by checking Payload directory  
          unzip -l "$IPA_FILE" | head -10
          
          echo "ipa_file_path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS .ipa validation successful"
          echo "üéØ iOS .ipa is ready for BrowserStack real device testing"
        else
          echo "‚ùå IPA not found at $IPA_FILE"
          find swift -name "*.ipa" -type f || true
          exit 1
        fi
    
    - name: Build XCUITest Bundle for BrowserStack
      id: build_test
      working-directory: swift
      run: |
        echo "üß™ Building XCUITest bundle for BrowserStack (like Android builds test APK)..."
        
        # Build XCUITest bundle using build-for-testing (this creates the .xctest bundle)
        xcodebuild build-for-testing \
          -project Tasks.xcodeproj \
          -scheme Tasks \
          -destination 'generic/platform=iOS' \
          -derivedDataPath build/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        # Find the XCTest bundle (like finding androidTest APK in Android)
        XCTEST_BUNDLE_PATH=$(find build/DerivedData -name "*.xctest" -type d | head -1)
        
        if [ -d "$XCTEST_BUNDLE_PATH" ]; then
          echo "‚úÖ Found XCUITest bundle: $XCTEST_BUNDLE_PATH"
          
          # Create ZIP of test bundle (NOT IPA - BrowserStack expects ZIP for test suite)
          XCTEST_DIR="$XCTEST_BUNDLE_PATH"
          (cd "$(dirname "$XCTEST_DIR")" && zip -qry "$GITHUB_WORKSPACE/swift/build/TasksUITests.zip" "$(basename "$XCTEST_DIR")")
          
          if [ -f "build/TasksUITests.zip" ]; then
            echo "‚úÖ XCUITest bundle packaged: $(pwd)/build/TasksUITests.zip"
            echo "test_bundle_zip=$(pwd)/build/TasksUITests.zip" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create XCUITest bundle ZIP"
            exit 1
          fi
        else
          echo "‚ùå XCUITest bundle not found"
          find build/DerivedData -name "*.xctest" -type d || echo "No .xctest bundles found"
          exit 1
        fi
    
    - name: Upload App and Test Bundle to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading app and XCUITest bundle to BrowserStack (like Kotlin uploads app + test APKs)..."
        
        APP_IPA="${{ steps.build_ios.outputs.ipa_file_path }}"
        TEST_ZIP="${{ steps.build_test.outputs.test_bundle_zip }}"
        CREDS="${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}"
        
        # 1. Upload AUT (app .ipa) - following Kotlin pattern
        echo "üì± Uploading app .ipa..."
        APP_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "$CREDS" \
          -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/app" \
          -F "file=@$APP_IPA" \
          -F "custom_id=ditto-swift-app")
        
        echo "App upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo "$APP_UPLOAD_RESPONSE" | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload app .ipa"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        # 2. Upload XCUITest bundle (test suite) - ZIP format as BrowserStack expects
        echo "üß™ Uploading XCUITest bundle ZIP..."
        TEST_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "$CREDS" \
          -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/test-suite" \
          -F "file=@$TEST_ZIP" \
          -F "custom_id=ditto-swift-tests")
        
        echo "Test upload response: $TEST_UPLOAD_RESPONSE"
        TEST_URL=$(echo "$TEST_UPLOAD_RESPONSE" | jq -r .test_suite_url)
        
        if [ "$TEST_URL" = "null" ] || [ -z "$TEST_URL" ]; then
          echo "‚ùå Failed to upload XCUITest bundle"
          echo "Response: $TEST_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "test_url=$TEST_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Both app and test bundle uploaded successfully"
    
    - name: Execute XCUITests on BrowserStack Real Devices
      id: test
      run: |
        # Following the exact Kotlin Espresso pattern for XCUITest
        APP_URL="${{ steps.upload.outputs.app_url }}"
        TEST_URL="${{ steps.upload.outputs.test_url }}"
        
        echo "üöÄ Running XCUITests on BrowserStack real devices (like Kotlin Espresso tests)..."
        echo "App URL: $APP_URL"
        echo "Test URL: $TEST_URL"
        
        # Validate inputs (like Kotlin does)
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "‚ùå No valid app URL available"
          exit 1
        fi
        
        if [ -z "$TEST_URL" ] || [ "$TEST_URL" = "null" ]; then
          echo "‚ùå No valid test URL available" 
          exit 1
        fi
        
        # Create XCUITest execution request (mirroring Kotlin Espresso build request)
        BUILD_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/build" \
          -H "Content-Type: application/json" \
          -d "{
            \"app\": \"$APP_URL\",
            \"testSuite\": \"$TEST_URL\",
            \"devices\": [
              \"iPhone 15 Pro-17\",
              \"iPhone 14-16\", 
              \"iPhone 13-15\"
            ],
            \"project\": \"Ditto Swift App\",
            \"buildName\": \"Build #${{ github.run_number }}\",
            \"buildTag\": \"${{ github.ref_name }}\",
            \"deviceLogs\": true,
            \"video\": true,
            \"networkLogs\": true
          }")
        
        echo "BrowserStack XCUITest API Response:"
        echo "$BUILD_RESPONSE"
        BUILD_ID=$(echo "$BUILD_RESPONSE" | jq -r .build_id)
        
        if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
          echo "‚ùå Failed to create XCUITest build"
          echo "Response: $BUILD_RESPONSE"
          exit 1
        fi
        
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "‚úÖ XCUITest build started with ID: $BUILD_ID"
    
    - name: Wait for XCUITest Execution to Complete
      run: |
        BUILD_ID="${{ steps.test.outputs.build_id }}"
        
        # Following Kotlin wait pattern exactly
        if [ "$BUILD_ID" = "null" ] || [ -z "$BUILD_ID" ]; then
          echo "‚ùå No valid BUILD_ID available"
          exit 1
        fi
        
        MAX_WAIT_TIME=1800  # 30 minutes (like Kotlin)
        CHECK_INTERVAL=30   # Check every 30 seconds
        ELAPSED=0
        
        while [ $ELAPSED -lt $MAX_WAIT_TIME ]; do
          BUILD_STATUS_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/$BUILD_ID")
          
          BUILD_STATUS=$(echo "$BUILD_STATUS_RESPONSE" | jq -r .status)
          
          if [ "$BUILD_STATUS" = "null" ] || [ -z "$BUILD_STATUS" ]; then
            echo "Error getting build status. Response: $BUILD_STATUS_RESPONSE"
            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
            continue
          fi
          
          echo "Build status: $BUILD_STATUS (elapsed: ${ELAPSED}s)"
          echo "Full response: $BUILD_STATUS_RESPONSE"
          
          # Check for completion states (BrowserStack XCUITest uses same states as Espresso)
          if [ "$BUILD_STATUS" = "done" ] || [ "$BUILD_STATUS" = "failed" ] || [ "$BUILD_STATUS" = "error" ] || [ "$BUILD_STATUS" = "passed" ] || [ "$BUILD_STATUS" = "completed" ]; then
            echo "Build completed with status: $BUILD_STATUS"
            break
          fi
          
          sleep $CHECK_INTERVAL
          ELAPSED=$((ELAPSED + CHECK_INTERVAL))
        done
        
        # Get final results (like Kotlin does)
        FINAL_RESULT=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/$BUILD_ID")
        
        echo "Final build result:"
        echo "$FINAL_RESULT" | jq .
        
        # Check if we got valid results (following Kotlin pattern)
        if echo "$FINAL_RESULT" | jq -e .devices > /dev/null 2>&1; then
          BUILD_STATUS=$(echo "$FINAL_RESULT" | jq -r .status)
          if [ "$BUILD_STATUS" != "passed" ]; then
            echo "‚ùå XCUITest build failed with status: $BUILD_STATUS"
            
            # Check each device for failures (like Kotlin checks each device)
            FAILED_TESTS=$(echo "$FINAL_RESULT" | jq -r '.devices[] | select(.sessions[].status != "passed") | .device')
            
            if [ -n "$FAILED_TESTS" ]; then
              echo "Tests failed on devices: $FAILED_TESTS"
            fi
            
            exit 1
          else
            echo "‚úÖ All XCUITests passed successfully!"
            echo "üéØ Swift iOS app tested on real devices with actual UI automation"
          fi
        else
          echo "Warning: Could not parse final results"
          echo "Raw response: $FINAL_RESULT"
        fi

  summary:
    name: BrowserStack Summary
    runs-on: macos-latest
    needs: [ios-browserstack]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack XCUITest Results - Swift iOS"
        echo ""
        echo "### iOS XCUITest Automated Testing (like Android Espresso)"
        echo "Status: ${{ needs.ios-browserstack.result }}"
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Swift iOS XCUITests successfully executed on BrowserStack real devices:"
          echo "   - iPhone 15 Pro (iOS 17) - XCUITest automation"
          echo "   - iPhone 14 (iOS 16) - XCUITest automation"  
          echo "   - iPhone 13 (iOS 15) - XCUITest automation"
          echo ""
          echo "üß™ XCUITest automation verified:"
          echo "   ‚úì Real UI test automation executed (like Android Espresso)"
          echo "   ‚úì App launches and UI interactions tested"
          echo "   ‚úì Ditto SDK initialization validated"
          echo "   ‚úì Task operations tested with real UI automation"
          echo "   ‚úì Multi-device XCUITest execution successful"
          echo "   ‚úì Proper test bundle (.xctest) and app (.ipa) deployment"
        else
          echo "‚ùå Swift iOS XCUITest execution failed on BrowserStack"
        fi
        
        echo ""
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "üéâ Swift iOS XCUITest execution completed successfully!"
          echo "ü§ñ Real UI automation testing validated app functionality"
          echo "üîó Check BrowserStack dashboard for XCUITest results, videos, and logs"
        else
          echo "‚ö†Ô∏è Swift iOS BrowserStack real device testing encountered issues"
          exit 1
        fi