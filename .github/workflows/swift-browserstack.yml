name: Swift BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'swift/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-browserstack:
    name: iOS BrowserStack Testing  
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Generate Env.swift
      working-directory: swift
      run: |
        chmod +x buildEnv.sh
        ./buildEnv.sh ../.env Tasks/
    
    - name: Build iOS App for BrowserStack
      id: build_ios
      working-directory: swift
      run: |
        echo "üî® Building iOS app for BrowserStack real device testing..."
        
        # Resolve dependencies first
        xcodebuild -resolvePackageDependencies \
          -project Tasks.xcodeproj \
          -scheme Tasks
        
        echo "üçé Building iOS device .ipa for BrowserStack real device testing..."
        
        # Build and archive iOS app for real device (not simulator)
        xcodebuild -project Tasks.xcodeproj \
          -scheme Tasks \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath build/Tasks.xcarchive \
          clean archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "üì¶ Creating unsigned .ipa for BrowserStack..."
        
        # Find the .app bundle from the archive
        APP_BUNDLE_PATH=$(find build/Tasks.xcarchive/Products/Applications -maxdepth 1 -name "*.app" -type d | head -1)
        
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "‚úÖ iOS app bundle found: $APP_BUNDLE_PATH"
          ls -la "$APP_BUNDLE_PATH"
          
          # Create unsigned IPA: Payload/<App>.app zipped as .ipa
          mkdir -p build/Payload
          cp -R "$APP_BUNDLE_PATH" build/Payload/
          (cd build && zip -qry Tasks-unsigned.ipa Payload && rm -rf Payload)
          
          # Verify IPA was created and expose absolute path for later steps
          if [ -f "build/Tasks-unsigned.ipa" ]; then
            echo "‚úÖ Unsigned .ipa created successfully: $(pwd)/build/Tasks-unsigned.ipa"
            ls -la build/Tasks-unsigned.ipa
            echo "ipa_file_path=$(pwd)/build/Tasks-unsigned.ipa" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create .ipa file"
            exit 1
          fi
          
        else
          echo "‚ùå iOS app bundle not found in archive"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
          exit 1
        fi
    
    - name: Validate iOS IPA Build
      id: ios_validation
      run: |
        echo "üì± Validating iOS .ipa build for BrowserStack deployment..."
        
        IPA_FILE="${{ steps.build_ios.outputs.ipa_file_path }}"
        if [ -f "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA: $IPA_FILE"
          echo "üì¶ IPA file details:"
          ls -la "$IPA_FILE"
          
          # Validate .ipa structure by checking Payload directory  
          unzip -l "$IPA_FILE" | head -10
          
          echo "ipa_file_path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS .ipa validation successful"
          echo "üéØ iOS .ipa is ready for BrowserStack real device testing"
        else
          echo "‚ùå IPA not found at $IPA_FILE"
          find swift -name "*.ipa" -type f || true
          exit 1
        fi
    
    - name: Setup Python for Appium Tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Appium Test Dependencies
      working-directory: swift
      run: |
        pip install -r requirements.txt
        echo "‚úÖ Appium dependencies installed"
    
    - name: Run Integration Test to Insert Test Document
      working-directory: swift
      env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
        DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
        DITTO_AUTH_URL: ${{ secrets.DITTO_AUTH_URL }}
        DITTO_WEBSOCKET_URL: ${{ secrets.DITTO_WEBSOCKET_URL }}
      run: |
        echo "üß™ Running integration test to insert document for BrowserStack verification..."
        
        # Generate test document ID for this run
        GITHUB_TEST_DOC_ID="swift_github_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
        echo "üìù Test document ID: ${GITHUB_TEST_DOC_ID}"
        
        # Insert test document via Ditto HTTP API (like JavaScript workflow does)
        echo "üåê Inserting test document via Ditto HTTP API..."
        
        RESPONSE=$(curl -s -w "\n%{http_code}" \
          -X POST "${DITTO_AUTH_URL}/api/v1/apps/${DITTO_APP_ID}/documents" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${DITTO_PLAYGROUND_TOKEN}" \
          -d '{
            "collection": "tasks",
            "document": {
              "_id": "'"${GITHUB_TEST_DOC_ID}"'",
              "text": "Swift BrowserStack Integration Test - Run '"${GITHUB_RUN_NUMBER}"'",
              "isCompleted": false,
              "createdAt": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
            }
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -1)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
        
        if [[ "$HTTP_CODE" =~ ^2[0-9][0-9]$ ]]; then
          echo "‚úÖ Successfully inserted test document via HTTP API"
          echo "üìÑ Response: $RESPONSE_BODY"
        else
          echo "‚ö†Ô∏è HTTP API call returned $HTTP_CODE: $RESPONSE_BODY"
          echo "‚ö†Ô∏è Continuing with basic environment validation..."
        fi
        
        # Run basic environment validation
        chmod +x TestRunner.swift
        swift TestRunner.swift
        
        echo "‚úÖ Integration test completed - test document should be in Ditto cloud"
    
    - name: Upload App to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading iOS .ipa to BrowserStack for Appium testing..."
        
        IPA_FILE="${{ steps.ios_validation.outputs.ipa_file_path }}"
        
        # Upload to regular app-automate (not XCUITest) for Appium
        APP_UPLOAD_RESPONSE=$(curl --fail --silent --show-error -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@$IPA_FILE" \
          -F "custom_id=ditto-swift-app")
        
        echo "App upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo "$APP_UPLOAD_RESPONSE" | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload app .ipa"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ App uploaded successfully: $APP_URL"
    
    - name: Execute Appium Tests on BrowserStack Real Devices
      id: test
      working-directory: swift
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        BROWSERSTACK_APP_URL: ${{ steps.upload.outputs.app_url }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_RUN_ID: ${{ github.run_id }}
      run: |
        echo "üöÄ Running Appium tests on BrowserStack real devices..."
        
        python appium_test.py
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ All Appium tests passed successfully!"
          echo "üéØ Swift iOS app validated with real UI automation on BrowserStack"
        else
          echo "‚ùå Appium tests failed"
          exit 1
        fi

  summary:
    name: BrowserStack Summary
    runs-on: macos-latest
    needs: [ios-browserstack]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack Appium Testing Results - Swift iOS"
        echo ""
        echo "### iOS Appium Automated Testing"
        echo "Status: ${{ needs.ios-browserstack.result }}"
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Swift iOS app successfully tested with Appium on BrowserStack real device:"
          echo "   - iPhone 15 Pro (iOS 17) - Appium automation"
          echo ""
          echo "üß™ Appium automation verified:"
          echo "   ‚úì App launches successfully on real device"
          echo "   ‚úì Real UI automation with Appium WebDriver"
          echo "   ‚úì Ditto SDK initialization validated (no crashes)"
          echo "   ‚úì Task operations tested with UI interactions"
          echo "   ‚úì App stability verified over extended runtime"
          echo "   ‚úì Cross-platform testing framework (like Android uses)"
        else
          echo "‚ùå Swift iOS Appium testing failed on BrowserStack"
        fi
        
        echo ""
        if [ "${{ needs.ios-browserstack.result }}" = "success" ]; then
          echo "üéâ Swift iOS Appium testing completed successfully!"
          echo "ü§ñ Real device UI automation validated app functionality"
          echo "üîó Check BrowserStack dashboard for Appium session videos and logs"
        else
          echo "‚ö†Ô∏è Swift iOS BrowserStack real device testing encountered issues"
          exit 1
        fi