#
# .github/workflows/java-spring-ci.yml
# Workflow for building and testing java-spring with BrowserStack integration
#
---
name: java-spring-ci

on:
  pull_request:
    branches: [main]
    paths:
      - 'java-spring/**'
      - '.github/workflows/java-spring-ci.yml'
  push:
    branches: [main, teodor/add-android-spring-ci]
    paths:
      - 'java-spring/**'
      - '.github/workflows/java-spring-ci.yml'
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Run linter (PMD)
        working-directory: java-spring
        run: ./gradlew pmdMain pmdTest

      - name: Run static analysis (SpotBugs)
        working-directory: java-spring
        run: ./gradlew spotbugsMain

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    outputs:
      test_doc_title: ${{ steps.test_doc.outputs.test_doc_title }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate test document title
        id: test_doc
        run: |
          # Create a unique GitHub test document with inverted timestamp to appear at top
          TIMESTAMP=$(date +%s)
          INVERTED_TIMESTAMP=$((9999999999 - TIMESTAMP))
          DOC_ID="${INVERTED_TIMESTAMP}_java_spring_ci_test_${{ github.run_id }}_${{ github.run_number }}"
          DOC_TITLE="${INVERTED_TIMESTAMP}_java_spring_ci_test_${{ github.run_id }}_${{ github.run_number }}"

          echo "test_doc_id=$DOC_ID" >> $GITHUB_OUTPUT
          echo "test_doc_title=$DOC_TITLE" >> $GITHUB_OUTPUT
          echo "📝 Generated test document (inverted timestamp for top position)"
          echo "📝 ID: '${DOC_ID}'"
          echo "📝 Title: '${DOC_TITLE}'"
          echo "📝 Timestamp: ${TIMESTAMP} → Inverted: ${INVERTED_TIMESTAMP}"

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Build Spring Boot JAR
        working-directory: java-spring
        env:
          DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
          DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
          DITTO_AUTH_URL: ${{ secrets.DITTO_AUTH_URL }}
          DITTO_WEBSOCKET_URL: ${{ secrets.DITTO_WEBSOCKET_URL }}
          DITTO_ENABLE_CLOUD_SYNC: true
        run: ./gradlew bootJar


      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-spring-jar-${{ github.run_number }}
          path: java-spring/build/libs/quickstart-0.0.1-SNAPSHOT.jar
          retention-days: 1

  browserstack-test:
    name: BrowserStack Device Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: java-spring-jar-${{ github.run_number }}
        path: java-spring/build/libs/
    
    - name: Insert test document into Ditto Cloud
      run: |
        # Use the same document title that was generated in build job
        DOC_TITLE="${{ needs.build.outputs.test_doc_title }}"
        DOC_ID="$DOC_TITLE"
        
        echo "📝 Inserting test document that matches build-time configuration"
        echo "📝 ID: '${DOC_ID}'"
        echo "📝 Title: '${DOC_TITLE}'"
        
        # Insert document using Ditto API v4 (same as Android workflow)
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"${DOC_TITLE}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        # Extract HTTP status code and response body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # Check if insertion was successful
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "✓ Successfully inserted test document with ID: ${DOC_ID}"
          echo "✓ Document title: ${DOC_TITLE}"
        else
          echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
    
    - name: Download and setup BrowserStack Local
      run: |
        wget -q https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip
        unzip -q BrowserStackLocal-linux-x64.zip
        chmod +x BrowserStackLocal
    
    - name: Start BrowserStack Local tunnel
      run: |
        ./BrowserStackLocal --key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} --local-identifier java-spring-${{ github.run_number }} &
        echo $! > bs-local.pid
        
        # Wait for BrowserStack Local to start
        echo "Waiting for BrowserStack Local tunnel..."
        sleep 10
        echo "✓ BrowserStack Local tunnel started"
    
    - name: Start Spring Boot app in background
      working-directory: java-spring
      run: |
        nohup java -jar build/libs/quickstart-0.0.1-SNAPSHOT.jar \
          --server.port=8080 \
          --spring.profiles.active=test > app.log 2>&1 &
        echo $! > app.pid
        
        # Wait for application to be ready
        echo "Waiting for Spring Boot app to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8080 >/dev/null 2>&1; then
            echo "✓ Spring Boot app is ready at http://localhost:8080"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
    
    - name: Execute Selenium tests on BrowserStack cloud browsers
      id: browserstack_tests
      run: |
        # Create BrowserStack test execution request for web browsers
        TITLE="${{ needs.build.outputs.test_doc_title }}"
        
        # Execute tests using BrowserStack Automate API for web browsers
        BUILD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/automate/builds" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"Java Spring Selenium Tests #${{ github.run_number }}\",
            \"project\": \"Ditto Java Spring\",
            \"settings\": {
              \"local\": true,
              \"localIdentifier\": \"java-spring-${{ github.run_number }}\"
            }
          }")
        
        echo "BrowserStack Build Response:"
        echo "$BUILD_RESPONSE"
        
        BUILD_ID=$(echo "$BUILD_RESPONSE" | jq -r .build_id)
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        
        # Run tests with BrowserStack capabilities
        cd java-spring
        ./gradlew test --tests "*TaskVisibilityIntegrationTest" \
          -DBROWSERSTACK_USERNAME="${{ secrets.BROWSERSTACK_USERNAME }}" \
          -DBROWSERSTACK_ACCESS_KEY="${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -DTEST_TASK_TITLE="$TITLE" \
          -DGITHUB_TEST_DOC_ID="$TITLE" \
          -DBROWSERSTACK_LOCAL_IDENTIFIER="java-spring-${{ github.run_number }}"
    
    - name: Stop Spring Boot app and BrowserStack Local
      if: always()
      run: |
        # Stop Spring Boot app
        cd java-spring
        if [ -f app.pid ]; then
          PID=$(cat app.pid)
          kill $PID || true
          rm app.pid
          echo "✓ Stopped Spring Boot app"
        fi
        
        # Stop BrowserStack Local tunnel
        cd ..
        if [ -f bs-local.pid ]; then
          PID=$(cat bs-local.pid)
          kill $PID || true
          rm bs-local.pid
          echo "✓ Stopped BrowserStack Local tunnel"
        fi
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: browserstack-test-reports-${{ github.run_number }}
        path: java-spring/build/reports/tests/
        retention-days: 1
    
    - name: Upload app logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-logs-${{ github.run_number }}
        path: java-spring/app.log
        retention-days: 1

