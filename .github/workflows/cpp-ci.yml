name: C++ TUI CI
on:
  push:
    branches: [main]
    paths:
      - 'cpp-tui/**'
  pull_request:
    branches: [main]
    paths:
      - 'cpp-tui/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build-and-test:
    name: Build and Test C++ TUI
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang clang-format build-essential
      
      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env
      
      - name: Insert test document into Ditto Cloud
        run: |
          # Create a unique GitHub test document with inverted timestamp to appear at top
          TIMESTAMP=$(date +%s)
          INVERTED_TIMESTAMP=$((9999999999 - TIMESTAMP))
          DOC_ID="${INVERTED_TIMESTAMP}_ci_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          DOC_TITLE="${INVERTED_TIMESTAMP}_ci_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          
          echo "📝 Inserting GitHub test document (inverted timestamp for top position)"
          echo "📝 ID: '${DOC_ID}'"
          echo "📝 Title: '${DOC_TITLE}'"
          echo "📝 Timestamp: ${TIMESTAMP} → Inverted: ${INVERTED_TIMESTAMP}"
          
          # Insert document using Ditto API v4
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"title\": \"${DOC_TITLE}\",
                  \"done\": false,
                  \"deleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✓ Successfully inserted C++ test document with title: ${DOC_TITLE}"
            echo "GITHUB_TEST_DOC_TITLE=${DOC_TITLE}" >> $GITHUB_ENV
          else
            echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
      
      - name: Run linter
        working-directory: cpp-tui/taskscpp
        run: |
          echo "🎨 Running clang-format check..."
          make format
          # Check if files were modified
          if ! git diff --exit-code; then
            echo "❌ Code style issues found. Run 'make format' to fix."
            exit 1
          fi
          echo "✅ Code style check passed"
      
      - name: Download and setup Ditto C++ SDK
        working-directory: cpp-tui/taskscpp
        run: |
          echo "📥 Downloading Ditto C++ SDK using Makefile logic..."
          make download-sdk
      
      - name: Build application
        working-directory: cpp-tui/taskscpp
        run: |
          echo "🔧 Generating env.h..."
          awk -f scripts/generate_env.awk ../../.env > src/env.h
          
          echo "🔨 Building C++ TUI application with REAL Ditto SDK..."
          make build
          
          echo "✅ C++ TUI app built with real Ditto SDK"
      
      - name: Run integration tests with REAL Ditto SDK
        working-directory: cpp-tui/taskscpp
        env:
          GITHUB_TEST_DOC_TITLE: ${{ env.GITHUB_TEST_DOC_TITLE }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "🧪 Running C++ integration tests with Ditto Cloud..."
          echo "📝 Looking for seeded document: ${GITHUB_TEST_DOC_TITLE}"
          
          # Build integration test with REAL Ditto SDK
          g++ -std=c++17 -I./src -I./sdk -I./third_party/cxxopts/include \
            tests/integration_test.cpp \
            src/task.cpp src/tasks_peer.cpp src/tasks_log.cpp \
            -L./sdk -lditto -ldl -lrt -pthread \
            -o build/integration_test
          
          echo "🚀 Running integration tests..."
          ./build/integration_test
          
          echo "✅ C++ integration tests completed successfully"