name: C++ CI Enhanced
on:
  push:
    branches: [ main ]
    paths: 
      - 'cpp-tui/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'cpp-tui/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang clang-format clang-tidy build-essential
        clang --version
        clang-format --version
        clang-tidy --version
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate env.h
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔧 Generating env.h from environment variables..."
        chmod +x scripts/generate_env.awk
        awk -f scripts/generate_env.awk ../../.env > src/env.h
        cat src/env.h
    
    - name: Run clang-format check
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🎨 Running clang-format check..."
        make format
        # Check if files were modified
        if ! git diff --exit-code; then
          echo "❌ Code style issues found. Run 'make format' to fix."
          exit 1
        fi
        echo "✅ Code style check passed"
  
  build-ubuntu:
    name: Build (ubuntu-latest)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang build-essential git
        clang --version
        cmake --version
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate env.h
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔧 Generating env.h from environment variables..."
        awk -f scripts/generate_env.awk ../../.env > src/env.h
    
    - name: Build C++ TUI App
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔨 Building C++ TUI application..."
        make build
        
        # Verify binary was created
        if [ -f "build/taskscpp" ]; then
          echo "✅ C++ TUI app built successfully"
          file build/taskscpp
          ls -la build/taskscpp
        else
          echo "❌ C++ TUI app binary not found"
          ls -la build/
          exit 1
        fi
    
    - name: Test basic functionality
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🧪 Testing basic C++ app functionality..."
        
        # Test help command
        echo "Testing --help command..."
        ./build/taskscpp --help
        
        # Test version info
        echo "Testing version information..."
        ./build/taskscpp --version || echo "Version command may not be available"
        
        echo "✅ Basic functionality tests passed"

  build-macos:
    name: Build (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        # Install cmake if not available
        if ! command -v cmake &> /dev/null; then
          brew install cmake
        fi
        
        clang --version
        cmake --version
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Generate env.h
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔧 Generating env.h from environment variables..."
        awk -f scripts/generate_env.awk ../../.env > src/env.h
    
    - name: Build C++ TUI App
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔨 Building C++ TUI application on macOS..."
        make build
        
        # Verify binary was created
        if [ -f "build/taskscpp" ]; then
          echo "✅ C++ TUI app built successfully on macOS"
          file build/taskscpp
          ls -la build/taskscpp
        else
          echo "❌ C++ TUI app binary not found"
          ls -la build/
          exit 1
        fi
    
    - name: Test basic functionality
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🧪 Testing basic C++ app functionality on macOS..."
        
        # Test help command
        echo "Testing --help command..."
        ./build/taskscpp --help
        
        echo "✅ Basic functionality tests passed on macOS"

  integration-test:
    name: Integration Test (ubuntu-latest)
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos]
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang build-essential jq curl
    
    - name: Create .env file with real credentials
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

    - name: Insert test document into Ditto Cloud
      run: |
        # Use GitHub run ID to create deterministic document ID
        DOC_ID="cpp_github_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Insert document using curl with correct JSON structure
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"C++ GitHub Test Task ${GITHUB_RUN_ID}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        # Extract HTTP status code and response body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n-1)
        
        # Check if insertion was successful
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "✓ Successfully inserted C++ test document with ID: ${DOC_ID}"
          echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
        else
          echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi
    
    - name: Generate env.h
      working-directory: cpp-tui/taskscpp
      run: |
        awk -f scripts/generate_env.awk ../../.env > src/env.h
    
    - name: Build C++ app with real credentials
      working-directory: cpp-tui/taskscpp
      run: |
        echo "🔨 Building C++ app with real Ditto credentials..."
        make build
    
    - name: Run C++ integration tests
      working-directory: cpp-tui/taskscpp
      env:
        GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
      run: |
        echo "🧪 Running C++ integration tests with real Ditto cloud sync..."
        echo "📝 Test document ID: ${GITHUB_TEST_DOC_ID}"
        
        # Compile and run integration tests
        echo "🔨 Building C++ integration tests..."
        g++ -std=c++11 -I./src -I./sdk -I./third_party/cxxopts/include \
          tests/integration_test.cpp \
          src/task.cpp src/tasks_peer.cpp src/tasks_log.cpp \
          -L./sdk -lditto \
          -o build/integration_test \
          -pthread || {
          echo "❌ Failed to compile integration tests"
          exit 1
        }
        
        echo "🚀 Running C++ integration tests..."
        ./build/integration_test
        
        echo "✅ C++ integration tests completed successfully"
        echo "🎯 Verified: Ditto initialization, sync, and CRUD operations"

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [lint, build-ubuntu, build-macos, integration-test]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "Job statuses:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Build Ubuntu: ${{ needs.build-ubuntu.result }}"
        echo "Build macOS: ${{ needs.build-macos.result }}"
        echo "Integration Test: ${{ needs.integration-test.result }}"
        
        # Check if any required job failed
        if [[ "${{ needs.lint.result }}" == "failure" || \
              "${{ needs.build-ubuntu.result }}" == "failure" || \
              "${{ needs.build-macos.result }}" == "failure" ]]; then
          echo "❌ Required jobs failed"
          exit 1
        else
          echo "✅ All required jobs passed"
        fi