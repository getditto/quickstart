#
# .github/workflows/pr-checks.yml
#
---
name: PR Checks

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    name: Android (ubuntu-24.04)

    # https://github.com/actions/runner-images#available-images
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt update && sudo apt install just
          just --version
          just tools

  rust:
    name: Rust Quickstart
    strategy:
      matrix:
        os: ["macos-latest", "ubuntu-latest"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy

      - name: Run clippy
        run: |
          cd rust-tui
          cargo clippy

      - name: Build project
        run: |
          cd rust-tui
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            export RUSTFLAGS="-C prefer-dynamic"
          fi
          cargo build

  js-web:
    name: JavaScript Web Lint (ubuntu-24.04)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: javascript-web
        run: npm ci

      - name: Run linting
        working-directory: javascript-web
        run: npm run lint

  js-node:
    name: JavaScript TUI Lint (ubuntu-24.04)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: javascript-tui
        run: npm ci

      - name: Run linting and tests
        working-directory: javascript-tui
        run: npm run test

  cpp:
    name: CPP Quickstart (ubuntu-latest)
    strategy:
      matrix:
        os: ["ubuntu-latest"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake build-essential
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install cmake
          fi

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=test_app_id" > .env
          echo "DITTO_PLAYGROUND_TOKEN=test_playground_token" >> .env
          echo "DITTO_AUTH_URL=https://auth.example.com" >> .env
          echo "DITTO_WEBSOCKET_URL=wss://websocket.example.com" >> .env

      - name: Download and setup Ditto SDK
        working-directory: cpp-tui/taskscpp/sdk
        run: |
          # Determine architecture and download appropriate Ditto SDK
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ]; then
              curl -O https://software.ditto.live/cpp-linux-x86_64/Ditto/4.10.0/dist/Ditto.tar.gz
            elif [ "$ARCH" = "aarch64" ]; then
              curl -O https://software.ditto.live/cpp-linux-aarch64/Ditto/4.10.0/dist/Ditto.tar.gz
            fi
          fi
          # Extract the SDK
          tar xvfz Ditto.tar.gz

      - name: Configure CMake
        working-directory: cpp-tui/taskscpp
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: cpp-tui/taskscpp
        run: cmake --build build

      - name: Test app startup
        working-directory: cpp-tui/taskscpp
        run: |
          # Test that the app can start and show help
          ./build/taskscpp --help
          echo "✅ Help command works"
          
          # Test that the app can show SDK version
          ./build/taskscpp --ditto-sdk-version
          echo "✅ SDK version command works"

  kotlin-multiplatform:
    name: Kotlin Multiplatform (ubuntu-24.04)
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Build project
        working-directory: kotlin-multiplatform
        run: ./gradlew build

      - name: Run tests
        working-directory: kotlin-multiplatform
        run: ./gradlew test
