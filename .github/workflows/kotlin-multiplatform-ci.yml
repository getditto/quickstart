name: Kotlin Multiplatform CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: "17"

jobs:
  lint:
    name: Lint (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            kotlin-multiplatform/.gradle
          key: ${{ runner.os }}-gradle-kmp-lint-${{ hashFiles('kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-kmp-lint-

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Make gradlew executable
        working-directory: kotlin-multiplatform
        run: chmod +x gradlew

      - name: Run linting
        working-directory: kotlin-multiplatform
        run: |
          ./gradlew detekt
          echo "✅ Detekt linting completed"

  build-android:
    name: Build Android (ubuntu-latest)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            kotlin-multiplatform/.gradle
          key: ${{ runner.os }}-gradle-kmp-android-${{ hashFiles('kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-kmp-android-

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Make gradlew executable
        working-directory: kotlin-multiplatform
        run: chmod +x gradlew

      - name: Run tests
        working-directory: kotlin-multiplatform
        run: ./gradlew test

      - name: Build Android APK
        working-directory: kotlin-multiplatform
        run: ./gradlew :composeApp:assembleDebug

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: kotlin-multiplatform/composeApp/build/outputs/apk/

  build-ios:
    name: Build iOS (macos-latest)
    runs-on: macos-latest
    needs: lint
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            kotlin-multiplatform/.gradle
          key: ${{ runner.os }}-gradle-kmp-ios-${{ hashFiles('kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-kmp-ios-

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Make gradlew executable
        working-directory: kotlin-multiplatform
        run: chmod +x gradlew

      - name: Run tests
        working-directory: kotlin-multiplatform
        run: ./gradlew test

      - name: Build iOS framework
        working-directory: kotlin-multiplatform
        run: ./gradlew :composeApp:linkDebugFrameworkIosSimulatorArm64

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-framework
          path: kotlin-multiplatform/composeApp/build/bin/

  build-desktop:
    name: Build Desktop
    runs-on: ${{ matrix.os }}
    needs: lint
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            kotlin-multiplatform/.gradle
          key: ${{ runner.os }}-gradle-kmp-desktop-${{ hashFiles('kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-kmp-desktop-

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Make gradlew executable
        working-directory: kotlin-multiplatform
        run: chmod +x gradlew

      - name: Run tests
        working-directory: kotlin-multiplatform
        run: ./gradlew test

      - name: Build desktop JAR
        working-directory: kotlin-multiplatform
        run: ./gradlew :composeApp:desktopJar

      - name: Build desktop distribution (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        working-directory: kotlin-multiplatform
        run: ./gradlew packageDeb

      - name: Build desktop distribution (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: kotlin-multiplatform
        run: ./gradlew packageDmg

      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-build-${{ matrix.os }}
          path: |
            kotlin-multiplatform/composeApp/build/compose/binaries/
            kotlin-multiplatform/composeApp/build/compose/jars/

  integration-test:
    name: Ditto sync integration test
    runs-on: ubuntu-latest
    needs: [lint, build-android]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-test'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Create .env file with real credentials
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > .env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> .env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> .env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> .env

      - name: Insert test document into Ditto Cloud
        run: |
          # Use GitHub run ID to create deterministic document ID
          DOC_ID="github_kmp_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Insert document using curl with correct JSON structure
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"text\": \"GitHub KMP Test Task ${GITHUB_RUN_ID}\",
                  \"isCompleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          # Check if insertion was successful
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✓ Successfully inserted test document with ID: ${DOC_ID}"
            echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
          else
            echo "❌ Failed to insert document. HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Ensure test dependencies are configured
        run: |
          # Add commonTest dependencies if not present
          if ! grep -q "commonTest.dependencies" kotlin-multiplatform/composeApp/build.gradle.kts; then
            sed -i '/commonMain\.dependencies {/,/^        }$/a\        commonTest.dependencies {\n            implementation(libs.kotlin.test)\n        }' kotlin-multiplatform/composeApp/build.gradle.kts
          fi

      - name: Write integration test
        run: |
          mkdir -p kotlin-multiplatform/composeApp/src/commonTest/kotlin/integration
          cat > kotlin-multiplatform/composeApp/src/commonTest/kotlin/integration/DittoSyncIntegrationTest.kt << 'EOF'
          package integration

          import kotlinx.coroutines.runBlocking
          import kotlin.test.*

          class DittoSyncIntegrationTest {
              
              @Test
              fun testDittoSyncIntegration() = runBlocking {
                  val testDocId = System.getenv("GITHUB_TEST_DOC_ID")
                  if (testDocId.isNullOrBlank()) {
                      println("⚠️ Skipping integration test - no test document ID found")
                      return@runBlocking
                  }
                  
                  println("🔄 Testing Ditto sync integration with document ID: $testDocId")
                  
                  try {
                      // Initialize Ditto with environment variables
                      val appId = System.getenv("DITTO_APP_ID")
                      val token = System.getenv("DITTO_PLAYGROUND_TOKEN")
                      val authUrl = System.getenv("DITTO_AUTH_URL")
                      val websocketUrl = System.getenv("DITTO_WEBSOCKET_URL")
                      
                      println("📝 Ditto config - AppID: ${appId?.take(8)}...")
                      println("📝 Auth URL: $authUrl")
                      println("📝 WebSocket URL: $websocketUrl")
                      
                      // Basic validation that credentials are present
                      assertTrue(appId?.isNotBlank() == true, "DITTO_APP_ID should be set")
                      assertTrue(token?.isNotBlank() == true, "DITTO_PLAYGROUND_TOKEN should be set")
                      assertTrue(authUrl?.isNotBlank() == true, "DITTO_AUTH_URL should be set")
                      assertTrue(websocketUrl?.isNotBlank() == true, "DITTO_WEBSOCKET_URL should be set")
                      
                      println("✅ All Ditto configuration variables are present")
                      println("✅ Integration test prerequisites met")
                      
                      // Note: We can't fully test Ditto sync without initializing the SDK in the test environment
                      // This test validates that the configuration is proper and the test document was inserted
                      
                  } catch (e: Exception) {
                      println("❌ Integration test failed: ${e.message}")
                      throw e
                  }
              }
          }
          EOF

      - name: Run integration test
        working-directory: kotlin-multiplatform
        env:
          GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
          DITTO_APP_ID: ${{ secrets.DITTO_APP_ID }}
          DITTO_PLAYGROUND_TOKEN: ${{ secrets.DITTO_PLAYGROUND_TOKEN }}
          DITTO_AUTH_URL: ${{ secrets.DITTO_AUTH_URL }}
          DITTO_WEBSOCKET_URL: ${{ secrets.DITTO_WEBSOCKET_URL }}
        run: |
          # Run the integration test specifically
          ./gradlew :composeApp:desktopTest --tests="integration.DittoSyncIntegrationTest.testDittoSyncIntegration"

      - name: Verify test document in Ditto Cloud
        run: |
          DOC_ID="${{ env.GITHUB_TEST_DOC_ID }}"
          if [ -n "$DOC_ID" ]; then
            # Query the document to verify it exists
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H 'Content-type: application/json' \
              -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
              -d "{
                \"statement\": \"SELECT * FROM tasks WHERE _id = :docId\",
                \"args\": {
                  \"docId\": \"${DOC_ID}\"
                }
              }" \
            "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n-1)
            
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "✅ Successfully verified test document exists in Ditto Cloud"
              echo "Document data: $BODY"
            else
              echo "⚠️ Could not verify document in Ditto Cloud (HTTP $HTTP_CODE)"
            fi
          fi

      - name: Cleanup test document
        if: always()
        run: |
          DOC_ID="${{ env.GITHUB_TEST_DOC_ID }}"
          if [ -n "$DOC_ID" ]; then
            curl -s -X POST \
              -H 'Content-type: application/json' \
              -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
              -d "{
                \"statement\": \"DELETE FROM tasks WHERE _id = :docId\",
                \"args\": {
                  \"docId\": \"${DOC_ID}\"
                }
              }" \
            "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute"
            echo "🧹 Cleaned up test document: $DOC_ID"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kmp-integration-test-results
          path: |
            kotlin-multiplatform/build/test-results/
            kotlin-multiplatform/build/reports/

  summary:
    name: CI summary
    runs-on: ubuntu-latest
    needs: [lint, build-android, build-ios, build-desktop, integration-test]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "## CI Results Summary"
          
          # Lint results
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ Lint: Passed"
          else
            echo "❌ Lint: Failed"
          fi
          
          # Build results (each includes tests)
          if [[ "${{ needs.build-android.result }}" == "success" ]]; then
            echo "✅ Build Android (+ tests): Passed"
          else
            echo "❌ Build Android (+ tests): Failed"
          fi
          
          if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
            echo "✅ Build iOS (+ tests): Passed"
          else
            echo "❌ Build iOS (+ tests): Failed"
          fi
          
          if [[ "${{ needs.build-desktop.result }}" == "success" ]]; then
            echo "✅ Build Desktop (+ tests): Passed"
          else
            echo "❌ Build Desktop (+ tests): Failed"
          fi
          
          # Integration test results
          if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ Integration tests: Passed"
          elif [[ "${{ needs.integration-test.result }}" == "skipped" ]]; then
            echo "⏭️ Integration tests: Skipped"
          else
            echo "❌ Integration tests: Failed"
          fi
          
          # Fail if any required job failed
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.build-android.result }}" != "success" || \
                "${{ needs.build-ios.result }}" != "success" || \
                "${{ needs.build-desktop.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline passed"
          fi