name: Kotlin Multiplatform CI

on:
  push:
    branches: [ main ]
    paths:
      - 'kotlin-multiplatform/**'
      - '.github/workflows/kotlin-multiplatform-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'kotlin-multiplatform/**'
      - '.github/workflows/kotlin-multiplatform-ci.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: kotlin-multiplatform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          kotlin-multiplatform/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('kotlin-multiplatform/gradle/wrapper/gradle-wrapper.properties', 'kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/gradle/libs.versions.toml') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Run Detekt lint
      run: ./gradlew detekt --stacktrace
    
    - name: Upload Detekt reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detekt-reports
        path: kotlin-multiplatform/composeApp/build/reports/detekt/

  build-android:
    name: Build Android (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: kotlin-multiplatform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          kotlin-multiplatform/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('kotlin-multiplatform/gradle/wrapper/gradle-wrapper.properties', 'kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/gradle/libs.versions.toml') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build Android Debug APK
      run: ./gradlew :composeApp:assembleDebug --stacktrace
    
    - name: Run Android unit tests
      run: ./gradlew :composeApp:testDebugUnitTest --stacktrace
    
    - name: Upload Android build outputs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-build-outputs
        path: |
          kotlin-multiplatform/composeApp/build/outputs/apk/debug/
          kotlin-multiplatform/composeApp/build/reports/tests/testDebugUnitTest/

  build-ios:
    name: Build iOS (macos-latest)
    runs-on: macos-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: kotlin-multiplatform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          kotlin-multiplatform/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('kotlin-multiplatform/gradle/wrapper/gradle-wrapper.properties', 'kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/gradle/libs.versions.toml') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build iOS Framework (Simulator ARM64)
      run: ./gradlew :composeApp:linkDebugFrameworkIosSimulatorArm64 --stacktrace
    
    - name: Build iOS Framework (Device ARM64)
      run: ./gradlew :composeApp:linkDebugFrameworkIosArm64 --stacktrace
    
    - name: Run iOS unit tests
      run: ./gradlew :composeApp:iosSimulatorArm64Test --stacktrace
    
    - name: Build iOS app with Xcode
      working-directory: kotlin-multiplatform/iosApp
      run: |
        xcodebuild -project iosApp.xcodeproj \
          -scheme iosApp \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
          build \
          -quiet
    
    - name: Upload iOS build outputs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-outputs
        path: |
          kotlin-multiplatform/composeApp/build/bin/iosSimulatorArm64/debugFramework/
          kotlin-multiplatform/composeApp/build/bin/iosArm64/debugFramework/
          kotlin-multiplatform/composeApp/build/reports/tests/iosSimulatorArm64Test/

  build-desktop:
    name: Build Desktop (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: kotlin-multiplatform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          kotlin-multiplatform/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('kotlin-multiplatform/gradle/wrapper/gradle-wrapper.properties', 'kotlin-multiplatform/**/*.gradle*', 'kotlin-multiplatform/gradle/libs.versions.toml') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    - name: Create test .env file
      run: |
        echo "DITTO_APP_ID=test_app_id" > .env
        echo "DITTO_PLAYGROUND_TOKEN=test_token" >> .env
        echo "DITTO_AUTH_URL=https://test.com" >> .env
        echo "DITTO_WEBSOCKET_URL=wss://test.com" >> .env
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build Desktop application
      run: ./gradlew :composeApp:packageDistributionForCurrentOS --stacktrace
    
    - name: Run Desktop unit tests
      run: ./gradlew :composeApp:desktopTest --stacktrace
    
    - name: Upload Desktop build outputs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: desktop-build-outputs
        path: |
          kotlin-multiplatform/composeApp/build/compose/binaries/main/
          kotlin-multiplatform/composeApp/build/reports/tests/desktopTest/

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, build-android, build-ios, build-desktop]
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "## Kotlin Multiplatform CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Target | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android | ${{ needs.build-android.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| iOS | ${{ needs.build-ios.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Desktop | ${{ needs.build-desktop.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any jobs failed
        if [[ "${{ needs.lint.result }}" != "success" ]] || \
           [[ "${{ needs.build-android.result }}" != "success" ]] || \
           [[ "${{ needs.build-ios.result }}" != "success" ]] || \
           [[ "${{ needs.build-desktop.result }}" != "success" ]]; then
          echo "❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All builds passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi