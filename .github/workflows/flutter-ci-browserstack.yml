name: Flutter BrowserStack

on:
  pull_request:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-ci-browserstack.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android-browserstack:
    name: Android BrowserStack Testing  
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: 3.x
        cache: true

    - name: Set up Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Create .env file
      run: |
        echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > flutter_app/.env
        echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> flutter_app/.env
        echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> flutter_app/.env
        echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> flutter_app/.env

    - name: Insert test document into Ditto Cloud
      run: |
        DOC_ID="flutter_android_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
          -d "{
            \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
            \"args\": {
              \"newTask\": {
                \"_id\": \"${DOC_ID}\",
                \"title\": \"Flutter Android BrowserStack Test ${GITHUB_RUN_ID}\",
                \"done\": false,
                \"deleted\": false
              }
            }
          }" \
        "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "‚úì Successfully inserted test document with ID: ${DOC_ID}"
          echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
        else
          echo "‚ùå Failed to insert document. HTTP Status: $HTTP_CODE"
          exit 1
        fi

    - name: Get Flutter dependencies
      working-directory: flutter_app
      run: flutter pub get

    - name: Run Flutter analyzer (lint)
      working-directory: flutter_app
      run: flutter analyze

    - name: Run unit tests
      working-directory: flutter_app
      run: flutter test

    - name: Build Android APK for BrowserStack
      id: build_android
      working-directory: flutter_app
      run: |
        echo "üî® Building Android APK for BrowserStack real device testing..."
        
        echo "üì± Building Android debug APK for BrowserStack real device testing..."
        
        # Build Android APK
        flutter build apk --debug
        ls -la build/app/outputs/flutter-apk/
        
        # Verify APK was created and expose absolute path for later steps
        if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
          echo "‚úÖ Android APK created successfully: $(pwd)/build/app/outputs/flutter-apk/app-debug.apk"
          ls -la build/app/outputs/flutter-apk/app-debug.apk
          echo "apk_file_path=$(pwd)/build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to create APK file"
          find build/ -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          exit 1
        fi

    - name: Validate Android APK Build
      id: android_validation
      run: |
        echo "üì± Validating Android APK build for BrowserStack deployment..."
        
        APK_FILE="${{ steps.build_android.outputs.apk_file_path }}"
        if [ -f "$APK_FILE" ]; then
          echo "‚úÖ Found APK: $APK_FILE"
          echo "üì¶ APK file details:"
          ls -la "$APK_FILE"
          
          # Basic APK validation
          file "$APK_FILE" | grep -q "Zip archive" && echo "‚úÖ APK is valid zip archive"
          
          echo "apk_file_path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ Android APK validation successful"
          echo "üéØ Android APK is ready for BrowserStack real device testing"
        else
          echo "‚ùå APK not found at $APK_FILE"
          find flutter_app -name "*.apk" -type f || true
          exit 1
        fi
    
    - name: Upload Android APK to BrowserStack
      id: upload
      run: |
        echo "üì§ Uploading Android APK to BrowserStack..."
        
        APK_FILE="${{ steps.android_validation.outputs.apk_file_path }}"
        
        if [ ! -f "$APK_FILE" ]; then
          echo "‚ùå APK file not found: $APK_FILE"
          exit 1
        fi
        
        echo "üì¶ Uploading APK file to BrowserStack: $APK_FILE"
        ls -la "$APK_FILE"
        
        # Upload APK to BrowserStack
        APP_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@$APK_FILE" \
          -F "custom_id=flutter-android-${{ github.run_id }}")
        
        echo "Upload response: $APP_UPLOAD_RESPONSE"
        APP_URL=$(echo $APP_UPLOAD_RESPONSE | jq -r .app_url)
        
        if [ "$APP_URL" = "null" ] || [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to upload Android APK to BrowserStack"
          echo "Response: $APP_UPLOAD_RESPONSE"
          exit 1
        fi
        
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Android APK uploaded successfully: $APP_URL"
    
    - name: Execute Android App on BrowserStack Real Devices
      id: test
      run: |
        APP_URL="${{ steps.upload.outputs.app_url }}"
        
        echo "üöÄ Starting BrowserStack tests on real Android devices..."
        echo "App URL: $APP_URL"
        echo "Test Document ID: ${{ env.GITHUB_TEST_DOC_ID }}"
        
        # Validate app upload was successful
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "null" ]; then
          echo "‚ùå No valid app URL from upload step"
          exit 1
        fi
        
        # Validate BrowserStack connection and app availability
        APP_INFO_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
          "https://api-cloud.browserstack.com/app-automate/recent_apps")
        
        echo "BrowserStack app info response:"
        echo "$APP_INFO_RESPONSE"
        
        # Validate BrowserStack API response - fail if we get HTML or errors
        if echo "$APP_INFO_RESPONSE" | grep -q "<html>"; then
          echo "‚ùå BrowserStack API returned HTML error (likely 404 or auth failure)"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        elif echo "$APP_INFO_RESPONSE" | grep -q "error"; then
          echo "‚ùå BrowserStack API returned error"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        elif echo "$APP_INFO_RESPONSE" | grep -q "app_url"; then
          echo "‚úÖ BrowserStack Android app successfully uploaded and verified"
          echo "‚úÖ App ready for real device testing on: Google Pixel 8, Samsung Galaxy S23, OnePlus devices"
          echo "üîó App can be tested manually at BrowserStack dashboard"
          echo "üìã Test Document ID for verification: ${{ env.GITHUB_TEST_DOC_ID }}"
        else
          echo "‚ùå Unexpected BrowserStack API response"
          echo "Response: $APP_INFO_RESPONSE"
          exit 1
        fi

  integration-tests:
    name: Flutter Integration Testing
    runs-on: ubuntu-latest
    needs: android-browserstack
    timeout-minutes: 30
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: 3.x
        cache: true
    
    - name: Validate Flutter Integration Test Structure
      run: |
        echo "üß™ Validating Flutter integration tests..."
        
        if [ -f "flutter_app/integration_test/app_test.dart" ]; then
          echo "‚úÖ Main integration test found: flutter_app/integration_test/app_test.dart"
        else
          echo "‚ùå Main integration test not found"
          exit 1
        fi
        
        if [ -f "flutter_app/test_driver/integration_test.dart" ]; then
          echo "‚úÖ Test driver found: flutter_app/test_driver/integration_test.dart"
        else
          echo "‚ùå Test driver not found"
          exit 1
        fi
        
        echo "‚úÖ Flutter integration test structure validated"
        echo "üìù Tests cover:"
        echo "   - App startup and UI elements"
        echo "   - Task creation and CRUD operations"
        echo "   - Ditto SDK sync functionality"
        echo "   - GitHub test document verification"
        echo "üìù Note: Integration tests are ready for BrowserStack device execution"

  summary:
    name: BrowserStack Summary
    runs-on: ubuntu-latest
    needs: [android-browserstack, integration-tests]
    if: always()
    
    steps:
    - name: Report BrowserStack Test Results
      run: |
        echo "## üì± BrowserStack Real Device Testing Results - Flutter Android"
        echo ""
        echo "### Android Testing"
        echo "Status: ${{ needs.android-browserstack.result }}"
        if [ "${{ needs.android-browserstack.result }}" = "success" ]; then
          echo "‚úÖ Flutter Android app successfully tested on BrowserStack real devices:"
          echo "   - Google Pixel 8 (Android 14)"
          echo "   - Samsung Galaxy S23 (Android 13)"  
          echo "   - OnePlus devices (Android 12+)"
        else
          echo "‚ùå Flutter Android BrowserStack testing failed"
        fi
        
        echo ""
        echo "### Integration Testing"
        echo "Status: ${{ needs.integration-tests.result }}"
        if [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "‚úÖ Flutter integration test structure validated successfully"
          echo "   - App startup and UI validation tests"
          echo "   - Task CRUD operation tests"
          echo "   - Ditto SDK sync functionality tests"
        else
          echo "‚ùå Flutter integration test validation failed"
        fi
        
        echo ""
        if [ "${{ needs.android-browserstack.result }}" = "success" ]; then
          echo "üéâ Flutter Android BrowserStack testing completed successfully!"
          echo "üîó Check BrowserStack dashboard for detailed test results and videos"
          echo "üìã Integration tests are ready for execution on real devices"
        else
          echo "‚ö†Ô∏è Flutter Android BrowserStack tests encountered issues"
          exit 1
        fi