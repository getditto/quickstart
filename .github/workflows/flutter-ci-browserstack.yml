name: Flutter CI with BrowserStack Integration Tests

on:
  pull_request:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-ci-browserstack.yml'
  push:
    branches: [main]
    paths:
      - 'flutter_app/**'
      - '.github/workflows/flutter-ci-browserstack.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  flutter-ci:
    name: Flutter CI with BrowserStack Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.x
          cache: true

      - name: Set up Java for Android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create .env file
        run: |
          echo "DITTO_APP_ID=${{ secrets.DITTO_APP_ID }}" > flutter_app/.env
          echo "DITTO_PLAYGROUND_TOKEN=${{ secrets.DITTO_PLAYGROUND_TOKEN }}" >> flutter_app/.env
          echo "DITTO_AUTH_URL=${{ secrets.DITTO_AUTH_URL }}" >> flutter_app/.env
          echo "DITTO_WEBSOCKET_URL=${{ secrets.DITTO_WEBSOCKET_URL }}" >> flutter_app/.env

      - name: Insert test document into Ditto Cloud
        run: |
          DOC_ID="flutter_test_${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            -H "Authorization: Bearer ${{ secrets.DITTO_API_KEY }}" \
            -d "{
              \"statement\": \"INSERT INTO tasks DOCUMENTS (:newTask) ON ID CONFLICT DO UPDATE\",
              \"args\": {
                \"newTask\": {
                  \"_id\": \"${DOC_ID}\",
                  \"title\": \"Flutter BrowserStack Test ${GITHUB_RUN_ID}\",
                  \"done\": false,
                  \"deleted\": false
                }
              }
            }" \
          "https://${{ secrets.DITTO_API_URL }}/api/v4/store/execute")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "‚úì Successfully inserted test document: ${DOC_ID}"
            echo "GITHUB_TEST_DOC_ID=${DOC_ID}" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to insert document"
            exit 1
          fi

      - name: Get Flutter dependencies
        working-directory: flutter_app
        run: flutter pub get

      # 1. Flutter lint
      - name: Run Flutter analyzer (lint)
        working-directory: flutter_app
        run: flutter analyze

      - name: Run unit tests
        working-directory: flutter_app
        run: flutter test

      # 2. Flutter build
      - name: Build Flutter APK for BrowserStack testing
        working-directory: flutter_app
        run: |
          flutter build apk --debug
          ls -la build/app/outputs/flutter-apk/

      - name: Upload APK to BrowserStack
        run: |
          RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@flutter_app/build/app/outputs/flutter-apk/app-debug.apk")
          
          APP_URL=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['app_url'])" 2>/dev/null || echo "")
          
          if [ -n "$APP_URL" ]; then
            echo "‚úì APK uploaded to BrowserStack: $APP_URL"
            echo "BROWSERSTACK_APP_URL=$APP_URL" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to upload APK"
            exit 1
          fi

      # 3. Build integration test suite
      - name: Build Flutter integration test suite
        working-directory: flutter_app
        run: |
          # Build the integration test suite for BrowserStack
          flutter build apk --debug --target=integration_test/app_test.dart
          ls -la build/app/outputs/flutter-apk/
          
          # Verify integration test APK was created
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "‚úÖ Integration test APK built successfully"
          else
            echo "‚ùå Integration test APK build failed"
            exit 1
          fi

      # 4. Upload integration test suite to BrowserStack
      - name: Upload Flutter integration test suite to BrowserStack
        run: |
          RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@flutter_app/build/app/outputs/flutter-apk/app-debug.apk")
          
          TEST_SUITE_URL=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['app_url'])" 2>/dev/null || echo "")
          
          if [ -n "$TEST_SUITE_URL" ]; then
            echo "‚úÖ Integration test suite uploaded: $TEST_SUITE_URL"
            echo "BROWSERSTACK_TEST_SUITE_URL=$TEST_SUITE_URL" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to upload integration test suite"
            exit 1
          fi

      # 5. Run Flutter integration tests on BrowserStack real devices
      - name: Execute Flutter integration tests on BrowserStack devices
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BROWSERSTACK_APP_URL: ${{ env.BROWSERSTACK_APP_URL }}
          BROWSERSTACK_TEST_SUITE_URL: ${{ env.BROWSERSTACK_TEST_SUITE_URL }}
          GITHUB_TEST_DOC_ID: ${{ env.GITHUB_TEST_DOC_ID }}
        run: |
          # Execute Flutter integration tests on BrowserStack using REST API
          echo "üöÄ Starting Flutter integration tests on BrowserStack real devices..."
          
          RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
            -X POST "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build" \
            -H "Content-Type: application/json" \
            -d "{
              \"app\": \"$BROWSERSTACK_APP_URL\",
              \"testSuite\": \"$BROWSERSTACK_TEST_SUITE_URL\",
              \"devices\": [\"Google Pixel 8-14.0\", \"Samsung Galaxy S23-13.0\"],
              \"project\": \"Ditto Flutter Integration Tests\",
              \"buildName\": \"Flutter Build #${{ github.run_number }}\",
              \"testTimeout\": 300
            }")
          
          echo "BrowserStack test execution response: $RESPONSE"
          
          BUILD_ID=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['buildId'])" 2>/dev/null || echo "")
          
          if [ -n "$BUILD_ID" ]; then
            echo "‚úÖ Flutter integration tests started on BrowserStack with Build ID: $BUILD_ID"
            echo "üìä View results at: https://app-automate.browserstack.com/dashboard/builds/$BUILD_ID"
            
            # Wait for tests to complete and check status
            echo "‚è≥ Waiting for Flutter integration tests to complete..."
            sleep 30
            
            while true; do
              STATUS_RESPONSE=$(curl -s -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" \
                "https://api-cloud.browserstack.com/app-automate/builds/$BUILD_ID.json")
              
              STATUS=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['build']['status'])" 2>/dev/null || echo "")
              
              if [ "$STATUS" = "passed" ]; then
                echo "‚úÖ All Flutter integration tests PASSED on BrowserStack!"
                break
              elif [ "$STATUS" = "failed" ]; then
                echo "‚ùå Flutter integration tests FAILED on BrowserStack"
                echo "üìä Check results at: https://app-automate.browserstack.com/dashboard/builds/$BUILD_ID"
                exit 1
              elif [ "$STATUS" = "running" ]; then
                echo "üîÑ Flutter integration tests still running..."
                sleep 30
              else
                echo "‚è≥ Waiting for test execution to start..."
                sleep 15
              fi
            done
          else
            echo "‚ùå Failed to start Flutter integration tests on BrowserStack"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ci-browserstack-results
          path: |
            flutter_app/build/app/outputs/flutter-apk/
            flutter_app/test_driver/
            flutter_app/integration_test/